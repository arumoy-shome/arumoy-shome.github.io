<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Arumoy Shome</title>
<link>https://arumoy.me/blogs.html</link>
<atom:link href="https://arumoy.me/blogs.xml" rel="self" type="application/rss+xml"/>
<description>Arumoy Shome&#39;s Website</description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Thu, 28 Nov 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Renaming files so they make sense (rename)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/rename/</link>
  <description><![CDATA[ 





<p>Often I need to work with files that have really long and obscure names. <code>rename</code> is a Python script I wrote that renames a given file using a sane format. By default, it makes the following changes:</p>
<ol type="1">
<li>Remove all whitespace and punctuation marks</li>
<li>Remove English stopwords</li>
<li>Lowercase all characters and</li>
<li>Hyphenate everything</li>
</ol>
<p>Here is the full script as of 2024-11-29, you can find the latest version of the script <a href="https://github.com/arumoy-shome/dotfiles/blob/master/bin/rename">in my dotfiles repository</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>rename</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="rename" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env python3</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(</span>
<span id="cb1-9">    os.path.join(os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HOME"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".local/share/rename"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stopwords-en.txt"</span>)</span>
<span id="cb1-10">) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-11">    STOPWORDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb1-12">    STOPWORDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [word.strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> STOPWORDS]</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rename(src: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb1-16">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src</span>
<span id="cb1-17">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dst.lower()</span>
<span id="cb1-18">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, dst)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace 1 or more whitespace with hyphen</span></span>
<span id="cb1-19">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(</span>
<span id="cb1-20">        <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[^a-zA-Z0-9]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, dst</span>
<span id="cb1-21">    )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace 1 or more punctuations with hyphen</span></span>
<span id="cb1-22">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([A-Z][a-z]+)"</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\1</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([A-Z]+)"</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\1</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, dst))</span>
<span id="cb1-23">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dst.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb1-24">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [word <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dst <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> word]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove empty words</span></span>
<span id="cb1-25">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [word <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dst <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> STOPWORDS]</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>.join(dst)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb1-30">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rename files the way I like it."</span>)</span>
<span id="cb1-31">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File or directory to rename"</span>)</span>
<span id="cb1-32">    parser.add_argument(</span>
<span id="cb1-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span>,</span>
<span id="cb1-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--force"</span>,</span>
<span id="cb1-35">        action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"store_true"</span>,</span>
<span id="cb1-36">        default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb1-37">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't ask for confirmation"</span>,</span>
<span id="cb1-38">    )</span>
<span id="cb1-39"></span>
<span id="cb1-40">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb1-41"></span>
<span id="cb1-42">    head, tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.split(args.source)</span>
<span id="cb1-43">    src, ext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.splitext(tail)</span>
<span id="cb1-44"></span>
<span id="cb1-45">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rename(src)</span>
<span id="cb1-46">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(head, dst)</span>
<span id="cb1-47">    dst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>ext<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-48"></span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> dst:</span>
<span id="cb1-50">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rename: no more words left!"</span>)</span>
<span id="cb1-51">        exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-52"></span>
<span id="cb1-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> args.force:</span>
<span id="cb1-54">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"rename: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>source<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> --&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">? [y, n]: "</span>)</span>
<span id="cb1-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">match</span> response:</span>
<span id="cb1-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>:</span>
<span id="cb1-57">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rename: aborted by user."</span>)</span>
<span id="cb1-58">                exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-59">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> _:</span>
<span id="cb1-60">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rename: incorrect response, please type one of [y, n]"</span>)</span>
<span id="cb1-61">                exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-62"></span>
<span id="cb1-63">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"rename: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>source<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> --&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-64">    os.rename(src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>args.source, dst<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dst)</span></code></pre></div>
</div>
<p>The stopwords are read from a text file so adding new stopwords (or words you never want to see in your filenames) easy. I store this file in my dotfiles repo to ensure that the <code>rename</code> script works on any machine where I clone my system configuration files.</p>
<p>By default, the script will ask for confirmation before renaming a file. The <code>--force</code> flag can be passed to bypass this. This makes it convenient to rename files in bulk using standard unix tools such as <code>find</code> and <code>xargs</code>. For instance, below how I show how you can rename all Docx files in a directory automatically.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.docx'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-print0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xargs</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-0</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n1</span> rename <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--force</span></span></code></pre></div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>python</category>
  <guid>https://arumoy.me/blogs/rename/</guid>
  <pubDate>Thu, 28 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating tags for git repositories (mytags)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/mytags/</link>
  <description><![CDATA[ 





<p>Often while working on remote servers where I don’t have permissions to install language servers, I find <a href="https://github.com/universal-ctags/ctags"><code>ctags</code></a> to be an effective tool to navigate code. <code>mytags</code> is a simple Bash script I wrote which wraps around <code>ctags</code> with some added functionality.</p>
<p>Here is the script as of 2024-11-27, <a href="https://github.com/arumoy-shome/dotfiles/blob/master/bin/mytags">you can find the latest version in my dotfiles repo</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mytags</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-1" data-filename="mytags" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-1-2"></span>
<span id="annotated-cell-1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__is_git_repo()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rev-parse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&gt;</span>/dev/null</span>
<span id="annotated-cell-1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-6"></span>
<span id="annotated-cell-1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__git_toplevel()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rev-parse <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--show-toplevel</span></span>
<span id="annotated-cell-1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-10"></span>
<span id="annotated-cell-1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__ctags()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-x</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> fd<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span></span>
<span id="annotated-cell-1-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="5">5</button><span id="annotated-cell-1-14" class="code-annotation-target">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> ctags <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--hidden</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--exclude</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.git'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="annotated-cell-1-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> ctags <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> ls-files <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--exclude-standard</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-19"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-20" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__is_git_repo</span></span>
<span id="annotated-cell-1-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-22">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mytags: not inside git repo."</span></span>
<span id="annotated-cell-1-23">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="annotated-cell-1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-25"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-26" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-27" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__git_toplevel</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-28" class="code-annotation-target">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__ctags</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="20,21,22,23,24" data-code-annotation="1"><code>mytags</code> check that we are inside a git repo, if not exit gracefully.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="26,29" data-code-annotation="2">When inside a git repo, start a new subshell and…</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="27" data-code-annotation="3"><code>cd</code> to the top-level of the repo (i.e.&nbsp;where the <code>.git</code> folder is located), this allows us to run <code>mytags</code> from any subdirectory inside the git repo</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="28" data-code-annotation="4">execute ctags with relevant files, either using <code>fd</code> if it exists or <code>git ls-files</code></span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="14,15,16" data-code-annotation="5">any additional arguments are passed along to <code>ctags</code></span>
</dd>
</dl>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <guid>https://arumoy.me/blogs/mytags/</guid>
  <pubDate>Sun, 17 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting the Module and Function Names from Python ASTs</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/python-ast-extract-module-method-names/</link>
  <description><![CDATA[ 





<section id="preliminaries-python-ast-module" class="level1">
<h1>Preliminaries: Python <code>ast</code> module</h1>
<p>Python has a built-in <code>ast</code> module which provides detailed documentation on the various nodes used to represent different elements of Python source code.</p>
<p>We can use the <code>ast.parse</code> method to create a AST from a given Python source code. Here is an example of how a function call is represented in a AST.</p>
<div id="fa4c06d1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ast</span>
<span id="cb1-2">ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(x, y)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>&lt;ast.Module at 0x1063c3950&gt;</code></pre>
</div>
</div>
<p>The <code>ast.parse</code> method returns a <code>ast.Module</code> object which by itself is not very helpful. To view the internal structure of the tree, we can use the <code>ast.dump</code> method.</p>
<div id="5f17333f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ast.dump(ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(x, y)"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>"Module(body=[Expr(value=Call(func=Name(id='foo', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())]))])"</code></pre>
</div>
</div>
<p>We can pass the <code>indent</code> argument to <code>ast.dump</code> along with a <code>print</code> statement to make the output more readable.</p>
<div id="a553dec9" class="cell" data-execution_count="3">
<div id="lst-base-case" class="python cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-base-case-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Base case
</figcaption>
<div aria-describedby="lst-base-case-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(x, y)"</span>), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
</div>
</figure>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='foo', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load()),
                    Name(id='y', ctx=Load())]))])</code></pre>
</div>
</div>
<p>Note that the function call is represented by a <code>ast.Call</code> node which contains a <code>func</code> and <code>args</code> attribute. The function name (in our case, <code>foo</code>) is represented by a <code>ast.Name</code> node, with the actual name under the <code>id</code> attribute.</p>
<p>And here is the AST when we want to use a function defined in a different module.</p>
<div id="e2e40618" class="cell" data-execution_count="4">
<div id="lst-single-nest" class="python cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-single-nest-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;2: Single nested function call
</figcaption>
<div aria-describedby="lst-single-nest-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar.foo(x, y)"</span>), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
</div>
</figure>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(
    body=[
        Expr(
            value=Call(
                func=Attribute(
                    value=Name(id='bar', ctx=Load()),
                    attr='foo',
                    ctx=Load()),
                args=[
                    Name(id='x', ctx=Load()),
                    Name(id='y', ctx=Load())]))])</code></pre>
</div>
</div>
<p>Things are a bit different now. We see that the <code>Call.func</code> is no longer a <code>ast.Name</code> node, but instead an <code>ast.Attribute</code> node. <code>Attribute.value</code> is now a <code>ast.Name</code> node with the name of the module (in our case <code>bar</code>) on the <code>id</code> attribute and the name of the function on the <code>attr</code> attribute.</p>
<p>Lets examine something a bit more complicated: What if the function is in a submodule?</p>
<div id="3c5ce0da" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baz.bar.foo(x, y)"</span>), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(
    body=[
        Expr(
            value=Call(
                func=Attribute(
                    value=Attribute(
                        value=Name(id='baz', ctx=Load()),
                        attr='bar',
                        ctx=Load()),
                    attr='foo',
                    ctx=Load()),
                args=[
                    Name(id='x', ctx=Load()),
                    Name(id='y', ctx=Load())]))])</code></pre>
</div>
</div>
<p>And even more nested?</p>
<div id="a666b26f" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(ast.parse(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quack.baz.bar.foo(x, y)"</span>), indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(
    body=[
        Expr(
            value=Call(
                func=Attribute(
                    value=Attribute(
                        value=Attribute(
                            value=Name(id='quack', ctx=Load()),
                            attr='baz',
                            ctx=Load()),
                        attr='bar',
                        ctx=Load()),
                    attr='foo',
                    ctx=Load()),
                args=[
                    Name(id='x', ctx=Load()),
                    Name(id='y', ctx=Load())]))])</code></pre>
</div>
</div>
<p>It seems that nested function calls are represented using nested <code>ast.Attribute</code> nodes. The top level module name is always a <code>ast.Name</code> node under the deepest <code>ast.Attribute.value</code> node. And the function name is always under the first <code>ast.Attribute.attr</code> node</p>
</section>
<section id="extracting-the-function-names" class="level1">
<h1>Extracting the Function Names</h1>
<p>Lets start with the simplest case, where we are only interested in the function names (ie. we only want to extract <code>foo</code> from all scenarios presented above). There are two cases to consider here:</p>
<ol type="1">
<li>If its a direct function call, then the <code>Call.func</code> node will contain a <code>Name</code> node.</li>
<li>If its a nested function call, then <code>Call.func</code> will contain nested <code>Attribute</code> nodes. The name of the function will be under the first <code>Attribute.attr</code>.</li>
</ol>
<p>We can do this using the <code>ast.NodeVisitor</code> class. Lets create a <code>FunctionNameCollector</code> class which inherits from <code>ast.NodeVisitor</code>. In the class, we define a <code>visit_Name</code> and <code>visit_Attribute</code> methods which are called every time we visit a <code>Name</code> or <code>Attribute</code> method respectively (more on this later).</p>
<div id="69b93336" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FunctionNameCollector(ast.NodeVisitor):</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-4"></span>
<span id="cb13-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visit_Name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node: ast.Name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb13-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names.append(node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span>
<span id="cb13-7"></span>
<span id="cb13-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visit_Attribute(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node: ast.Attribute) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb13-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names.append(node.attr)</span>
<span id="cb13-10"></span>
<span id="cb13-11"></span>
<span id="cb13-12">tests <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo(x, y)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar.foo(x, y)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baz.bar.foo(x, y)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quack.baz.bar.foo(x, y)"</span>]</span>
<span id="cb13-13"></span>
<span id="cb13-14">trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ast.parse(test) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> test <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tests]</span>
<span id="cb13-15">call_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-16">    node <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tree <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trees <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ast.walk(tree) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(node, ast.Call)</span>
<span id="cb13-17">]</span>
<span id="cb13-18">collector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FunctionNameCollector()</span>
<span id="cb13-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> call_nodes:</span>
<span id="cb13-20">    collector.visit(node.func)</span>
<span id="cb13-21"></span>
<span id="cb13-22">collector.names</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['foo', 'foo', 'foo', 'foo']</code></pre>
</div>
</div>
<p>I collect all the <code>ast.Call</code> nodes in our test cases using the <code>ast.walk</code> function which returns a generator that yields every child node under the given AST. Then I call the <code>visit</code> method provided by <code>ast.NodeVisitor</code> which visits only the direct child nodes of all <code>Call.func</code> nodes in our test cases.</p>
</section>
<section id="collecting-both-module-and-function-names" class="level1">
<h1>Collecting Both Module and Function Names</h1>
<p>Here is where things get a bit more interesting. Here are the cases to consider:</p>
<ol type="1">
<li>The base case is that we have a direct function call, in which case we need to extract the function name from <code>Name.id</code> under <code>Call.func</code> (same as before).</li>
<li>However, if it is a nested function call, then:
<ol type="a">
<li>The function name will be under the first <code>Attribute.attr</code> and</li>
<li>The module name will be under the last <code>Attribute.value.id</code>.</li>
</ol></li>
</ol>
<p>So the <code>visit_Name</code> method remains the same however, we do need to modify the <code>visit_Attribute</code> method such that it traverses all child nodes under <code>Attribute.value</code> until we hit the base case. Here is the modified code.</p>
<div id="04290394" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NameCollector(ast.NodeVisitor):</span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb15-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-5"></span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visit_Name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node: ast.Name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stack:</span>
<span id="cb15-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names.append((node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stack[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].attr))</span>
<span id="cb15-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb15-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.names.append((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>))</span>
<span id="cb15-11"></span>
<span id="cb15-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visit_Attribute(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node: ast.Attribute) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stack.append(node)</span>
<span id="cb15-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.visit(node.value)</span>
<span id="cb15-15"></span>
<span id="cb15-16">collector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NameCollector()</span>
<span id="cb15-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> call_nodes:</span>
<span id="cb15-18">    collector.visit(node.func)</span>
<span id="cb15-19"></span>
<span id="cb15-20">collector.names</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>[(None, 'foo'), ('bar', 'foo'), ('baz', 'foo'), ('quack', 'foo')]</code></pre>
</div>
</div>
<p>The code is similar to <code>FunctionNameCollector</code> defined above, with a few key changes. The <code>collector.names</code> now returns a list of tuples containing the <code>module, function</code> names.</p>
<p>I use a stack to keep track of the <code>Attribute</code> nodes we visit. Whenever we visit an <code>Attribute</code> node, I append it to the stack and then call the <code>NodeVisitor.visit</code> method on the Node under its <code>value</code> attribute.</p>
<p>When we visit a <code>Name</code> node, it can either be because we are at the base case (a direct function call) or because we have reached the last <code>Attribute.value</code> node. If the stack is not empty, then its the latter which means the <code>Name</code> node is the module name and the function name is under the first <code>Attribute.attr</code> in the stack. Otherwise, its a direct function call so the <code>Name</code> node is the function name. Since we don’t have a module in this case, we return <code>None</code> in the tuple.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>python</category>
  <guid>https://arumoy.me/blogs/python-ast-extract-module-method-names/</guid>
  <pubDate>Sat, 23 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Visualisation Zoo</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/visualisation-zoo/</link>
  <description><![CDATA[ 





<p>This is a collection of data visualisations I have created in the past from prior research publications. The title of this post is inspired by the <span class="citation" data-cites="heer2010tour">Heer, Bostock, and Ogievetsky (2010)</span> paper.</p>
<div class="no-row-height column-margin column-container"><div id="ref-heer2010tour" class="csl-entry">
Heer, Jeffrey, Michael Bostock, and Vadim Ogievetsky. 2010. <span>“A Tour Through the Visualization Zoo.”</span> <em>Communications of the ACM</em> 53 (6): 59–67. <a href="https://doi.org/10.1145/1743546.1743567">https://doi.org/10.1145/1743546.1743567</a>.
</div></div><section id="joint-distribution-of-categorical-variables" class="level1 page-columns page-full">
<h1>Joint Distribution of Categorical Variables</h1>
<p>The following visualisation in Figure&nbsp;1 comes from the very first Conference paper I wrote <span class="citation" data-cites="shome2022data">(Shome, Cruz, and Deursen 2022)</span>. The paper explored the presence of anti-patterns in popular ML datasets that lead to accumulation of technical debt in the downstream stages of the pipeline.</p>
<div class="no-row-height column-margin column-container"><div id="ref-shome2022data" class="csl-entry">
Shome, Arumoy, Luís Cruz, and Arie van Deursen. 2022. <span>“Data Smells in Public Datasets.”</span> In <em>Proceedings of the 1st International Conference on AI Engineering: Software Engineering for AI</em>. CAIN ’22. ACM. <a href="https://doi.org/10.1145/3522664.3528621">https://doi.org/10.1145/3522664.3528621</a>.
</div></div><p>We curated a catalogue of 14 such anti-patterns or <em>“data-smells”</em> and manually analysed their presence in 25 popular ML datasets from Kaggle.</p>
<p>I created the visualisation using a <a href="https://seaborn.pydata.org/generated/seaborn.JointGrid.html#seaborn.JointGrid">JointGrid from the Seaborn library</a>. The visualisation in the main subplot shows the distribution of the data-smells across all datasets that were analysed using a two-dimensional histogram. The visualisations in the marginal subplots shows a histogram of the corresponding categorical variables.</p>
<div id="fig-jointplot" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-jointplot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/visualisation-zoo/jointplot-data-smells.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-jointplot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Joint distribution of two categorical variables.
</figcaption>
</figure>
</div>
</section>
<section id="heatmap-of-correlation-between-numerical-variables" class="level1 page-columns page-full">
<h1>Heatmap of Correlation Between Numerical Variables</h1>
<div class="page-columns page-full">
<div id="fig-heatmap-corr" class="quarto-float quarto-figure quarto-figure-center anchored page-columns page-full">
<figure class="quarto-float quarto-float-fig figure page-columns page-full">
<div aria-describedby="fig-heatmap-corr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca" class="page-columns page-full">
<img src="https://arumoy.me/blogs/visualisation-zoo/heatmap-corr.png" class="img-fluid figure-img column-screen">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-heatmap-corr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Heatmap of correlation between numerical variables
</figcaption>
</figure>
</div>
</div>
<p>The next visualisation comes from our <span class="citation" data-cites="shome2024data">Shome, Cruz, and Deursen (2024)</span> paper. Here we analysed the relationship between data dependent and model dependent fairness metrics. Figure&nbsp;2 shows the results obtained from the empirical study conducted using 8 datasets and 4 ML models.</p>
<div class="no-row-height column-margin column-container"><div id="ref-shome2024data" class="csl-entry">
Shome, Arumoy, Luı̀s Cruz, and Arie van Deursen. 2024. <span>“Data Vs. Model Machine Learning Fairness Testing: An Empirical Study.”</span> In <em>International Workshop on Deep Learning for Testing and Testing for Deep Learning</em>. DeepTest ’24. IEEE/ACM. <a href="https://doi.org/10.1145/3643786.3648022">https://doi.org/10.1145/3643786.3648022</a>.
</div></div><p>Each heatmap represents results obtained from a fairness metric (we used <em>Disparate Impact</em> and <em>Statistical Parity Difference</em>). The ML models are represented along the Y axis, while the datasets are along the X axis. Each block shows the correlation between the data and model variants of the corresponding fairness metric. The statistically significant cases are marked with an asterisk. The strength of the correlation is denoted using color–bright hues of red indicate positive correlation while cooler hues of blue represent negative correlation.</p>
</section>
<section id="omniart-sentiments-through-colours" class="level1 page-columns page-full">
<h1>OmniArt: Sentiments through Colours</h1>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://arumoy.me/blogs/visualisation-zoo/ace.png" class="img-fluid figure-img column-screen"></p>
<figcaption>Overview of ACE: Art, Colour and Emotion browser</figcaption>
</figure>
</div>
</div>
<p>This is from a project where we used the <a href="https://isis-data.science.uva.nl/strezoski/#2">OmniArt dataset</a> to explore the relationship between colors and emotional tones in art through sentiment analysis. We used NLP techniques to analyze metadata from various artworks, focusing on how colors influence perceived sentiments based on painting descriptions. This work is also published as a conference paper with a video demonstration of the tool <span class="citation" data-cites="strezoski2019ace">(Strezoski et al. 2019)</span>.</p>
<div class="no-row-height column-margin column-container"><div id="ref-strezoski2019ace" class="csl-entry">
Strezoski, Gjorgji, Arumoy Shome, Riccardo Bianchi, Shruti Rao, and Marcel Worring. 2019. <span>“ACE: Art, Color and Emotion.”</span> In <em>Proceedings of the 27th ACM International Conference on Multimedia</em>. MM ’19. ACM. <a href="https://doi.org/10.1145/3343031.3350588">https://doi.org/10.1145/3343031.3350588</a>.
</div></div><p>We created an interactive tool to allow users from varied backgrounds to intuitively explore the complex relationship between colour usage in art and the emotional sentiments those colours may evoke. In the image, you can see a snapshot of the tool which comprises of several interconnected components designed to facilitate interactive exploration of the data.</p>
<p>These visual components are designed to allow users from varied backgrounds to intuitively explore the complex relationship between color usage in art and the emotional sentiments those colors may evoke. This tool not only aids in art analysis but also makes the process accessible to a broader audience, enhancing understanding through interactive visual storytelling and data-driven insights.</p>
</section>
<section id="buildings-of-amsterdam" class="level1 page-columns page-full">
<h1>Buildings of Amsterdam</h1>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://arumoy.me/blogs/visualisation-zoo/amsterdam.jpg" class="img-fluid figure-img column-screen"></p>
<figcaption>Model of buildings in the city of Amsterdam</figcaption>
</figure>
</div>
</div>
<p>This one is from a large-scale data engineering project. Using <a href="http://ahn2.pointclouds.nl/">2 terabytes of point-cloud data</a>, We created 3D models of all buildings in the Netherlands (well, we only managed to create a model for the city of Amsterdam).</p>
<p>We created an interactive web-based visualization that displays the 3D models of buildings across the Netherlands. Using a map of the Netherlands, we divided the data into tiles representing different areas. We made it into the “Hall of Fame” for the course, you can find an <a href="https://event.cwi.nl/lsde/2018/showcase_c1.shtml">interactive demo hosted on the course website</a>. Fair warning, the demo is pretty bad. So here is an image of the model for the beautiful city of Amsterdam.</p>



</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>python</category>
  <category>design</category>
  <guid>https://arumoy.me/blogs/visualisation-zoo/</guid>
  <pubDate>Sun, 17 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Toggling background color in kitty and vim (yob)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/yob/</link>
  <description><![CDATA[ 





<p><code>yob</code> is a shell script that I wrote to toggle between a light and dark colorscheme in Kitty, my terminal of choice. Some additional configuration also allow me to sync the vim colorscheme to that of kitty. This is a much simpler version of <a href="https://github.com/wincent/wincent/blob/main/aspects/dotfiles/files/.zsh/color">this script by Greg Hurrell</a>.</p>
<p>The name is inspired by the <a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a> package for vim. The package adds keybindings prefixed with the <code>yo*</code> that toggle various vim settings. The <code>b</code> in <code>yob</code> stands for “background”.</p>
<p>Here is the script in its entirety as of 2024-01-19. You can also find the latest version in my <a href="https://github.com/arumoy-shome/dotfiles/blob/master/bin/yob">dotfiles repository</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>yob</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-1" data-filename="yob" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-1-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LIGHT_THEME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colors/gruvbox-light.conf"</span></span>
<span id="annotated-cell-1-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DARK_THEME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colors/gruvbox-dark.conf"</span></span>
<span id="annotated-cell-1-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LOCATION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/.local/share/yob"</span></span>
<span id="annotated-cell-1-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">VIM_BG_FILE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$LOCATION</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/background"</span></span>
<span id="annotated-cell-1-7"></span>
<span id="annotated-cell-1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$LOCATION</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$LOCATION</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-12"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-13" class="code-annotation-target"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__update()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span></span>
<span id="annotated-cell-1-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/.config/kitty"</span></span>
<span id="annotated-cell-1-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$LIGHT_THEME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> current-theme.conf</span>
<span id="annotated-cell-1-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="annotated-cell-1-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DARK_THEME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> current-theme.conf</span>
<span id="annotated-cell-1-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dark"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-24"></span>
<span id="annotated-cell-1-25">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kitten</span> @ set-colors <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--configured</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/.config/kitty/current-theme.conf"</span></span>
<span id="annotated-cell-1-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-27"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-28" class="code-annotation-target"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__toggle()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-29">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CURRENT_BG</span></span>
<span id="annotated-cell-1-30">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CURRENT_BG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 1 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CURRENT_BG</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-32">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__update</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dark"</span></span>
<span id="annotated-cell-1-33">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="annotated-cell-1-34">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__update</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span></span>
<span id="annotated-cell-1-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-37"></span>
<span id="annotated-cell-1-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">main()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TERM</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kitty"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yob: not running kitty, doing nothing."</span></span>
<span id="annotated-cell-1-41">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="annotated-cell-1-42">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-43"></span>
<span id="annotated-cell-1-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$VIM_BG_FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-45">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__init</span></span>
<span id="annotated-cell-1-46">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__update</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dark"</span></span>
<span id="annotated-cell-1-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 0</span>
<span id="annotated-cell-1-48">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-49"></span>
<span id="annotated-cell-1-50">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__toggle</span></span>
<span id="annotated-cell-1-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-52"></span>
<span id="annotated-cell-1-53"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">main</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3,4,5,6,8,9,10,11" data-code-annotation="1">Some initial setup. Here we define the location of the light and dark colorscheme files for kitty (I choose to save them in the kitty config directory and check it into git so that they are available wherever I clone my dotfiles repo). We also store additional data for <code>yob</code> in <code>~/.local/share/yob/background</code> as per XDG best practices for unix systems.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="13,14,15,16,17,18,19,20,21,22,23,25,26" data-code-annotation="2">Here we create a symbolic link between the colorscheme file and <code>current-theme.conf</code>. The <code>current-theme.conf</code> file is picked up by kitty next time it starts. Finally, we set the theme for the existing kitty sessions using <code>kitty @ set-colors</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="28,29,30,31,32,33,34,35,36" data-code-annotation="3">This function toggles between the light and dark themes based on information in <code>~/.local/share/yob/background</code>.</span>
</dd>
</dl>
<section id="choosing-a-colorscheme-with-light-and-dark-variant" class="level1">
<h1>Choosing a colorscheme with light and dark variant</h1>
<p>After many experiments with various colorschemes in different lighting conditions, I picked <a href="https://github.com/morhetz/gruvbox">Gruvbox</a> as my theme of choice. There are several reasons for this decision:</p>
<ul>
<li>The colorscheme has been around for a little over 10 years and is very stable (very few changes since 2018 as per the commits chart on github).</li>
<li>Both light and dark variants of the theme are legible in various lighting conditions.</li>
<li>Due to its popularity, the theme is available in Kitty and Vim 9 out-of-the-box.</li>
</ul>
</section>
<section id="preserving-kitty-colors-across-sessions" class="level1">
<h1>Preserving kitty colors across sessions</h1>
<p>To preserve the colorscheme across kitty sessions, <code>yob</code> symlinks the colorsheme files to <code>current-theme.conf</code> in kitty’s config directory. The following line ensures that kitty sources the right colorscheme next time kitty starts.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.config/kitty/kitty.conf</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="~/.config/kitty/kitty.conf" style="background: #f1f3f5;"><pre class="sourceCode conf code-with-copy"><code class="sourceCode toml"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">include</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">current-theme.conf</span></span></code></pre></div>
</div>
</section>
<section id="syncing-vim-colors-with-kitty" class="level1">
<h1>Syncing vim colors with kitty</h1>
<p>The <code>aru#set_background()</code> function reads the first line of <code>~/.local/share/yob/background</code> using the built-in <code>readfile</code> function in vim (see <code>:help readfile</code>) and updates the <code>background</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.vim/autoload/aru.vim</strong></pre>
</div>
<pre class="vim" data-filename=".vim/autoload/aru.vim"><code>function! aru#set_background() abort
  let config_file = expand('~/.local/share/yob/background')
  if filereadable(config_file)
    let bg = readfile(config_file, '', 1)[0]
  endif

  execute 'set background=' .. bg
endfunction</code></pre>
</div>
<p>If we run <code>yob</code> from another shell, the colors in existing vim sessions does not update. To account for this I introduce an autocommand that is fired every time vim is started and when it gets focus.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.vimrc</strong></pre>
</div>
<pre class="vim" data-filename=".vimrc"><code>set termguicolors
color retrobox

function! AruAutoBackground() abort
  augroup AruAutoBackground
    autocmd!
    autocmd FocusGained,VimEnter * call aru#set_background()
  augroup END
endfunction
call AruAutoBackground()</code></pre>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>vim</category>
  <guid>https://arumoy.me/blogs/yob/</guid>
  <pubDate>Fri, 19 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Organising research projects with git</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/organise-research-project-git/</link>
  <description><![CDATA[ 





<p>In this post I list some of the standards and conventions I have developed over the course of my PhD to organise research project data. I use git to version control the relevant files and host them on Github.</p>
<section id="project-naming-convention" class="level1">
<h1>Project naming convention</h1>
<p>I name my research projects uniformly across all applications: file system, task management, Github, etc. I use the naming convention of <code>&lt;my-last-name&gt;&lt;project-start-year&gt;&lt;keyword&gt;</code>.</p>
</section>
<section id="project-directory-structure" class="level1">
<h1>Project directory structure</h1>
<p>My research projects have the following directory structure. Here is an example from a prior project I worked on:</p>
<pre><code>~/phd/shome2022qualitative/
├── bin
├── data
├── docs
├── report
├── src
└── vendor
    ├── biswas2021fair
    └── zhang2021ignorance
</code></pre>
<p>Typically, research projects have several scripts for the data collection, data pre-processing, training ML models and running experiments. Put these scripts in the <code>bin/</code> directory. If you have a more mature code base, you can organise your files in the <code>src/</code> directory. This way your scripts in <code>bin/</code> are still able to import modules or helper functions from <code>src/</code>.</p>
<p>Put all datasets for the project in the <code>data/</code> directory. I typically put existing datasets (such as benchmarks introduced in prior papers) and the data created during the course of the project in separate folders within the <code>data/</code> directory.</p>
<p>If you have a simple static website consisting of html and css pages, put them in the <code>docs/</code> directory. Then you can use <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site">Github Pages</a> to serve your website.</p>
<p>Put all your latex files, images and additional resources such as <code>*.cls</code> and <code>*.bst</code> files in the <code>report/</code> directory. You may write several papers that originate from the same core project idea. Name the latex files using the <code>&lt;conference-name&gt;&lt;year&gt;.tex</code> template. This prevents the need for duplicating all the accompanying files for each submission. Use version control to track the progress of your papers. For instance, use <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">git tags</a> to mark the major drafts and final submission. This makes it easy to retrieve prior versions of the paper if required.</p>
<p>If replication packages from prior papers are available on git, use <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodules</a> and put them in the <code>vendor/</code> directory. If they are hosted on other platforms such as Zenodo or Figshare, check in the source code files you need as reference. Use folders within <code>vendor/</code> to organise replication packages from multiple papers.</p>
</section>
<section id="recommendations-for-.gitignore-patterns" class="level1">
<h1>Recommendations for <code>.gitignore</code> patterns</h1>
<p>Github has <a href="https://github.com/github/gitignore">an excellent repository</a> of <code>.gitignore</code> patterns for various filetypes. Consider importing them into your own global <code>.gitignore</code> file (for instance, Latex and Python). At the project level, do not check in the pdf version of your papers since these are typically high churn files and git cannot produce meaningful diffs for binary files. Instead use the <code>latexmk</code> command to generate the pdf. You can also consider putting the command in a <code>Makefile</code> to reduce keystrokes.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">latexmk</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-pdf</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-outdir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>report report/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your-paper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>.pdf</span></code></pre></div>
<p>If you use Overleaf, <a href="https://www.overleaf.com/learn/how-to/Git_Integration_and_GitHub_Synchronization">connect your document to the Github project</a> so that everything remains in sync.</p>
</section>
<section id="recommendations-for-git-commit-messages" class="level1">
<h1>Recommendations for git commit messages</h1>
<p>Follow the general best practices for writing good git commit messages. I use the following template which was recommended by <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Tim Pope</a>. You can also paste the following snippet into <code>~/.config/git/message</code>. Then the text is automatically displayed in your text editor, whenever you write a commit message. See <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">the git configuration documentation</a> for more details.</p>
<pre><code># 50-character subject line
#
# 72-character wrapped longer description. This should answer:
#
# * Why was this change necessary?
# * How does it address the problem?
# * Are there any side effects?
#
# Include a link to the ticket, if any.</code></pre>
<section id="additionally-for-the-subject-line" class="level2">
<h2 class="anchored" data-anchor-id="additionally-for-the-subject-line">Additionally for the subject line</h2>
<p>For instance, say you want to commit a first draft of your paper. Use a subject line as follows:</p>
<pre id="annotated-cell-4" class="code-annotation-code"><code>feat(report): init icse24 paper draft</code></pre>
<p>Where <code>feat</code> is an abbreviation for “feature”. The braces specify the folder within which the changes were made, and the title provides a quick description of the change.</p>
<p>In contrast, say you refactor the data processing pipeline script. The subject line could be as follows:</p>
<pre><code>refac(bin): remove magic numbers in data-process.sh</code></pre>
<p>This makes it very easy to track down prior commits that introduced changes in the paper versus in the code. For instance, you can target all refactoring commits within the <code>report/</code> directory using the following <code>git grep</code> command:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> log <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refac.*report.'</span></span></code></pre></div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>research</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/organise-research-project-git/</guid>
  <pubDate>Fri, 19 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Managing Scientific Bibliography using Emacs Org-mode</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/bibliography-management-orgmode/</link>
  <description><![CDATA[ 





<section id="front-matter-and-setup" class="level1">
<h1>Front Matter and setup</h1>
<p>I store all my bibliographic information in a single <code>bib.org</code> file. I show a hypothetical version of this file below, with two entries. I store each paper, as a level 1 header. I use the bibtex key as the title for the header.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bib.org</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="bib.org" style="background: #f1f3f5;"><pre class="sourceCode org code-with-copy"><code class="sourceCode orgmode"><span id="cb1-1">#+title: Bibliography</span>
<span id="cb1-2">#+tags: test viz data self notebook survey</span>
<span id="cb1-3">#+tags: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[ test : fair </span>]</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">* </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[#A]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> amershi2015modeltracker :test:viz:</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">#+begin_src bibtex</span>
<span id="cb1-8">@InProceedings{   amershi2015modeltracker,</span>
<span id="cb1-9">  series        = {CHI ’15},</span>
<span id="cb1-10">  title         = {ModelTracker: Redesigning Performance Analysis Tools for</span>
<span id="cb1-11">                  Machine Learning},</span>
<span id="cb1-12">  url           = {http://dx.doi.org/10.1145/2702123.2702509},</span>
<span id="cb1-13">  doi           = {10.1145/2702123.2702509},</span>
<span id="cb1-14">  booktitle     = {Proceedings of the 33rd Annual ACM Conference on Human</span>
<span id="cb1-15">                  Factors in Computing Systems},</span>
<span id="cb1-16">  publisher     = {ACM},</span>
<span id="cb1-17">  author        = {Amershi, Saleema and Chickering, Max and Drucker, Steven</span>
<span id="cb1-18">                  M. and Lee, Bongshin and Simard, Patrice and Suh, Jina},</span>
<span id="cb1-19">  year          = {2015},</span>
<span id="cb1-20">  month         = apr,</span>
<span id="cb1-21">  collection    = {CHI ’15}</span>
<span id="cb1-22">}</span>
<span id="cb1-23">#+end_src</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">* </span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">DONE</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[#A]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> chen2022fairness       :test:fair:survey:</span></span>
<span id="cb1-26">:LOGBOOK:</span>
<span id="cb1-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- </span>State "DONE"       from "TODO"       [2022-09-19 Mon 14:14]</span>
<span id="cb1-28">:END:</span>
<span id="cb1-29"></span>
<span id="cb1-30">Some notes that I may have regarding this paper.</span>
<span id="cb1-31"></span>
<span id="cb1-32">#+begin_src bibtex</span>
<span id="cb1-33">@Misc{            chen2023fairness,</span>
<span id="cb1-34">  title         = {Fairness Testing: A Comprehensive Survey and Analysis of</span>
<span id="cb1-35">                  Trends},</span>
<span id="cb1-36">  author        = {Zhenpeng Chen and Jie M. Zhang and Max Hort and Federica</span>
<span id="cb1-37">                  Sarro and Mark Harman},</span>
<span id="cb1-38">  year          = {2023},</span>
<span id="cb1-39">  eprint        = {2207.10223},</span>
<span id="cb1-40">  archiveprefix = {arXiv},</span>
<span id="cb1-41">  primaryclass  = {cs.SE}</span>
<span id="cb1-42">}</span>
<span id="cb1-43">#+end_src</span></code></pre></div>
</div>
</section>
<section id="retrieving-bibtex-information-from-crossref" class="level1">
<h1>Retrieving bibtex information from Crossref</h1>
<p>My search for papers always begins on Google Scholar. For papers that I find interesting, I retreive the bibtex information using the <code>doi2bib</code> script. The script accepts the DOI as an argument, and prints the bibtex information obtained from Crossref.</p>
<p>The script also accepts a <code>--preprint</code> flag, in which case, it accepts an Arxiv ID and obtains the bibtex information from Arxiv directly.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Scientific Paper Discovery">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Scientific Paper Discovery
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can find more information on how I discovery scientific papers <a href="../scientific-paper-discovery">in this blogpost</a>.</p>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="doi2bib">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
doi2bib
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can find more details regarding the <code>doi2bib</code> script <a href="../doi2bib">in this blogpost</a>.</p>
</div>
</div>
</section>
<section id="capturing-bibtex-information-using-org-capture" class="level1">
<h1>Capturing bibtex information using org-capture</h1>
<p>Emacs org-mode has a nifty capture feature that allows the user to quickly capture information. I have the following capture template to save bibtex information into the bib.org file above.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bib.txt</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="bib.txt" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">* %?</span>
<span id="cb2-2"></span>
<span id="cb2-3">#+begin_src bibtex</span>
<span id="cb2-4">#+end_src</span></code></pre></div>
</div>
<p>I have the following org-capture configuration in my init.el file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>init.el</strong></pre>
</div>
<pre class="elisp" data-filename="init.el"><code>(org-capture-templates
`(("p" "Paper" entry (file aru/org-bib-file)
   "%[~/.emacs.d/org-templates/bib.txt]" :prepend t)))</code></pre>
</div>
<p>In Emacs, I hit the keystrokes <code>C-c c</code> followed by the <code>p</code> key to initiate the capture sequence. Org-mode automatically inserts the capture template shown above. It creates a new level 1 header and inserts an empty bibtex source block.</p>
<p>To populate the source block, I hit <code>C-c '</code> (see <code>org-special-edit</code> for more information on this keybinding). With <code>C-u M-|</code>, I run the <code>doi2bib</code> command along with the DOI to add the output of the command into the source block. <code>C-c '</code> closes the special edit buffer and returns back to bib.org.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Evil Mode">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Evil Mode
</div>
</div>
<div class="callout-body-container callout-body">
<p>I now use evil-mode which provides vim keybindings within Emacs. I populate the source block using the <code>:read!</code> command.</p>
</div>
</div>
</section>
<section id="mapping-of-orgmode-features-and-my-usage" class="level1">
<h1>Mapping of orgmode features and my usage</h1>
<p>In the following table I summarise how I use the built-in orgmode features for organising the bibliographic information.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 9%">
<col style="width: 90%">
</colgroup>
<thead>
<tr class="header">
<th>Feature</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>TODO keywords</td>
<td>I mark papers that I want to read with the <code>TODO</code> state. Papers that I have already read are marked with the <code>DONE</code> state.</td>
</tr>
<tr class="even">
<td>Priority</td>
<td>Papers that I find interesting, and cite frequently are marked with the <code>A</code> priority.</td>
</tr>
<tr class="odd">
<td>Tags</td>
<td>I use tags to broadly classify the papers based on topics relevant for my Phd. You can see the tags I use in the example bib.org file provided above.</td>
</tr>
</tbody>
</table>
</section>
<section id="searching-and-retrieving" class="level1">
<h1>Searching and Retrieving</h1>
<p>I use org-agenda to search and retrieve papers of interest. For instance, I can filter papers that I need to read by asking org-agenda for papers that are marked with the <code>TODO</code> state (see <code>org-todo-list</code>). I can produce a list of all papers that have the <code>testing</code> and <code>data</code> tag (see <code>org-tags-view</code>). More complex search queries can be constructed using the org advanced search commands: for instance, give me all papers on <code>testing</code> that were written by author X in the year of 2001 (see <a href="https://orgmode.org/worg/org-tutorials/advanced-searching.html">org advanced search syntax</a>).</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>emacs</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/bibliography-management-orgmode/</guid>
  <pubDate>Wed, 29 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automatically retrieving Bibtex information from DOI</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/doi2bib/</link>
  <description><![CDATA[ 





<p><code>doi2bib</code> is a simple Python script I wrote to automatically retrieve bibtex information for a given DOI. The script queries Crossref to obtain the bibtex. The script can also handle pre-prints published on Arxiv. Here is the content of <code>doi2bib</code> along with some explaination of what the script does.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>doi2bib</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-1" data-filename="doi2bib" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env python3</span></span>
<span id="annotated-cell-1-2"></span>
<span id="annotated-cell-1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="annotated-cell-1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="annotated-cell-1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> request, error</span>
<span id="annotated-cell-1-6"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-7" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_bibtex(doi,ispreprint):</span>
<span id="annotated-cell-1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ispreprint:</span>
<span id="annotated-cell-1-9">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://arxiv.org/bibtex/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>doi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-1-11">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://api.crossref.org/works/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>doi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/transform/application/x-bibtex"</span></span>
<span id="annotated-cell-1-12">    req <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.Request(url)</span>
<span id="annotated-cell-1-13"></span>
<span id="annotated-cell-1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="annotated-cell-1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> request.urlopen(req) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> response:</span>
<span id="annotated-cell-1-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response.read().decode()</span>
<span id="annotated-cell-1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> error.HTTPError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="annotated-cell-1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HTTP Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> error.URLError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="annotated-cell-1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"URL Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>reason<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-21"></span>
<span id="annotated-cell-1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-1-23">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser(</span>
<span id="annotated-cell-1-24">            description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Convert DOI or Arxiv ID to Bibtex"</span></span>
<span id="annotated-cell-1-25">            )</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-26" class="code-annotation-target">    parser.add_argument(</span>
<span id="annotated-cell-1-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doi"</span>,</span>
<span id="annotated-cell-1-28">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOI or Arxiv ID of paper"</span></span>
<span id="annotated-cell-1-29">            )</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-30" class="code-annotation-target">    parser.add_argument(</span>
<span id="annotated-cell-1-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-p"</span>,</span>
<span id="annotated-cell-1-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--preprint"</span>,</span>
<span id="annotated-cell-1-33">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treat provided DOI as Arxiv ID"</span>,</span>
<span id="annotated-cell-1-34">            action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"store_true"</span>,</span>
<span id="annotated-cell-1-35">            default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="annotated-cell-1-36">            )</span>
<span id="annotated-cell-1-37">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="annotated-cell-1-38"></span>
<span id="annotated-cell-1-39">    bibtex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_bibtex(args.doi, args.preprint)</span>
<span id="annotated-cell-1-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(bibtex)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="26,27,28,29" data-code-annotation="1">The script must be provided with a DOI. This can also be an Arxiv ID.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="30,31,32,33,34,35,36" data-code-annotation="2">The <code>-p</code> or <code>--preprint</code> flag can be specified to indicate that the provided DOI is an Arxiv ID.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="7,8,9,10,11,12" data-code-annotation="3">The Crossref API is queried with the provided DOI to retrieve the bibtex information. With the <code>--preprint</code> flag, the Arxiv API is used.</span>
</dd>
</dl>
<p>I pipe the results through the <a href="http://www.gerd-neugebauer.de/software/TeX/BibTool/en/">bib-tool CLI</a>, to format the text and generate a unique key. I specify the following key format in my <code>.bibtoolrsc</code> file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.bibtoolrsc</strong></pre>
</div>
<pre data-filename=".bibtoolrsc"><code>print.use.tab=off
fmt.et.al=""
key.format="%-1n(author)%4d(year)%-T(title)"</code></pre>
</div>
<p>By default, bibtool uses tabs for indentation. I turn this off. Bibtool adds “.ea” to the author name to indicate “and others”. I prefer to just have the last name of the first author in the key, so I set it to an empty string. I set the format of the key to the last name of the first author, followed by the year of publication and the first meaningful word from the title.</p>
<p>Here is the script in action, I use one of my own publications as an example.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> doi2bib 10.1145/3522664.3528621 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bibtool</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-k</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">@InProceedings{</span>   shome2022data,</span>
<span id="cb2-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">series</span>        = {CAIN ’22},</span>
<span id="cb2-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">title</span>         = {Data smells in public datasets},</span>
<span id="cb2-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">url</span>           = {http://dx.doi.org/10.1145/3522664.3528621},</span>
<span id="cb2-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">doi</span>           = {10.1145/3522664.3528621},</span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">booktitle</span>     = {Proceedings of the 1st International Conference on AI</span>
<span id="cb2-9">                  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Engineering:</span> Software Engineering for AI},</span>
<span id="cb2-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">publisher</span>     = {ACM},</span>
<span id="cb2-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">author</span>        = {Shome, Arumoy and Cruz, Luís and van Deursen, Arie},</span>
<span id="cb2-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">year</span>          = {2022},</span>
<span id="cb2-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">month</span>         = may,</span>
<span id="cb2-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collection</span>    = {CAIN ’22}</span>
<span id="cb2-15"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>And here is another example using an Arxiv ID (again, one of my own).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> doi2bib <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--preprint</span> 2305.04988 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bibtool</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-k</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">@Misc{</span>            shome2023towards,</span>
<span id="cb3-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">title</span>         = {Towards Understanding Machine Learning Testing in</span>
<span id="cb3-5">                  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Practise},</span></span>
<span id="cb3-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">author</span>        = {Arumoy Shome and Luis Cruz and Arie van Deursen},</span>
<span id="cb3-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">year</span>          = {2023},</span>
<span id="cb3-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">eprint</span>        = {2305.04988},</span>
<span id="cb3-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">archiveprefix</span> = {arXiv},</span>
<span id="cb3-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">primaryclass</span>  = {cs.SE}</span>
<span id="cb3-11"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/doi2bib/</guid>
  <pubDate>Sun, 26 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CMS using Pandoc and Friends</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/cms-pandoc/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="Migrated to Quarto">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Migrated to Quarto
</div>
</div>
<div class="callout-body-container callout-body">
<p>Since 2023-07-01, I have been using <a href="https://quarto.org">Quarto</a> to manage my website.</p>
<p>The CMS system presented here works well. However, I felt the need for features such as code annotations and custom document layouts (to name a few) while still authoring content in plaintext. Quarto provides all this functionality (and more) without me having to dig around in pandoc’s documentation or write custom javascript.</p>
<p>My original website which I managed using the CMS system presented here, is open-sourced and <a href="https://github.com/arumoy-shome/www-arumoy-archive">can be viewed on Github</a>.</p>
</div>
</div>
<p><a href="../website-management-pandoc">In a prior post</a>, I shared my humble system for running a static website using pandoc. Since that post, I have replaced several manual steps in the process with automated bash scripts.</p>
<section id="creating-and-naming-new-posts" class="level1">
<h1>Creating and naming new posts</h1>
<p>I use the following human and machine readable naming convention for all my posts.</p>
<pre><code>YYYY-MM-DD--&lt;category&gt;--&lt;title&gt;</code></pre>
<p>Within the post, I use yaml metadata to record additional information related to the post such as its title, date, author and a short abstract.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my-new-blog.md</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="my-new-blog.md" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> foo bar baz</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">author</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> John Doe</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 2023-09-09</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abstract</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-6">    This is the abstract for this post. This abstract shows up on the</span>
<span id="cb2-7">    index page automatically! Read on to learn how I do this.</span>
<span id="cb2-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</div>
<p>Although the naming convention is clear, writing it is a bit cumbersome. Note that I also need to write the same information twice—once within the file in the yaml metadata, and again when naming the file. To reduce chances of human error, and make my life a bit easier, I automate the process of creating a new post using the following python script.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bin/new</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-3" data-filename="bin/new" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env python3</span></span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="annotated-cell-3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="annotated-cell-3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="annotated-cell-3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="annotated-cell-3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="annotated-cell-3-8"></span>
<span id="annotated-cell-3-9">EXT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".md"</span></span>
<span id="annotated-cell-3-10">TIMESTAMP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="annotated-cell-3-11">TIMESTAMP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TIMESTAMP.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__format__</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %a %H:%M"</span>)</span>
<span id="annotated-cell-3-12">TODAY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now()</span>
<span id="annotated-cell-3-13">TODAY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TODAY.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__format__</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-3-14"></span>
<span id="annotated-cell-3-15">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser()</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1">1</button><span id="annotated-cell-3-16" class="code-annotation-target">parser.add_argument(</span>
<span id="annotated-cell-3-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>,</span>
<span id="annotated-cell-3-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title of new content"</span>,</span>
<span id="annotated-cell-3-19">)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2">2</button><span id="annotated-cell-3-20" class="code-annotation-target">parser.add_argument(</span>
<span id="annotated-cell-3-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-t"</span>,</span>
<span id="annotated-cell-3-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--type"</span>,</span>
<span id="annotated-cell-3-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type of content"</span>,</span>
<span id="annotated-cell-3-24">    choices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="annotated-cell-3-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blog"</span>,</span>
<span id="annotated-cell-3-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"talk"</span>,</span>
<span id="annotated-cell-3-27">    ],</span>
<span id="annotated-cell-3-28">)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3">3</button><span id="annotated-cell-3-29" class="code-annotation-target">parser.add_argument(</span>
<span id="annotated-cell-3-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-x"</span>,</span>
<span id="annotated-cell-3-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--noedit"</span>,</span>
<span id="annotated-cell-3-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do not open new file in EDITOR"</span>,</span>
<span id="annotated-cell-3-33">    action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"store_true"</span>,</span>
<span id="annotated-cell-3-34">)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="4">4</button><span id="annotated-cell-3-35" class="code-annotation-target">parser.add_argument(</span>
<span id="annotated-cell-3-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span>,</span>
<span id="annotated-cell-3-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--force"</span>,</span>
<span id="annotated-cell-3-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do not ask for confirmation"</span>,</span>
<span id="annotated-cell-3-39">    action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"store_true"</span>,</span>
<span id="annotated-cell-3-40">)</span>
<span id="annotated-cell-3-41">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="annotated-cell-3-42"></span>
<span id="annotated-cell-3-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> args.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>:</span>
<span id="annotated-cell-3-44">    TYPE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span></span>
<span id="annotated-cell-3-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-3-46">    TYPE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blog"</span></span>
<span id="annotated-cell-3-47"></span>
<span id="annotated-cell-3-48">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args.title.strip().lower().replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="annotated-cell-3-49">NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>.join([TODAY, TYPE, TITLE])</span>
<span id="annotated-cell-3-50">FILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>TYPE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>EXT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-51"></span>
<span id="annotated-cell-3-52">FRONTMATTER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-3-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>,</span>
<span id="annotated-cell-3-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-55">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>TITLE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-57">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"date: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>TIMESTAMP<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-59">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"filename: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author: Arumoy Shome"</span>,</span>
<span id="annotated-cell-3-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-63">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abstract: |"</span>,</span>
<span id="annotated-cell-3-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="annotated-cell-3-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>,</span>
<span id="annotated-cell-3-66">]</span>
<span id="annotated-cell-3-67"></span>
<span id="annotated-cell-3-68"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> args.force:</span>
<span id="annotated-cell-3-69">    confirm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Create </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">? [y]es/[n]o: "</span>)</span>
<span id="annotated-cell-3-70"></span>
<span id="annotated-cell-3-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> confirm.lower()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>:</span>
<span id="annotated-cell-3-72">        sys.exit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminated by user"</span>)</span>
<span id="annotated-cell-3-73"></span>
<span id="annotated-cell-3-74"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="annotated-cell-3-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="annotated-cell-3-76">        f.writelines(FRONTMATTER)</span>
<span id="annotated-cell-3-77"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileExistsError</span>:</span>
<span id="annotated-cell-3-78">    sys.exit(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> already exists"</span>)</span>
<span id="annotated-cell-3-79"></span>
<span id="annotated-cell-3-80"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> args.noedit:</span>
<span id="annotated-cell-3-81">    subprocess.run([os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EDITOR"</span>), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>])</span>
<span id="annotated-cell-3-82"></span>
<span id="annotated-cell-3-83">sys.exit(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> created"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="16,17,18,19" data-code-annotation="1">Accept the title of the new post as the first positional argument. This argument is mandatory.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="20,21,22,23,24,25,26,27,28" data-code-annotation="2">Optionally specify a type of post.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="29,30,31,32,33,34" data-code-annotation="3">If this flag is passed, don’t open the new file in <code>$EDITOR</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="35,36,37,38,39,40" data-code-annotation="4">If this flag is passed, don’t ask for confirmation.</span>
</dd>
</dl>
<div class="callout callout-style-default callout-tip callout-titled" title="Python argparse">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Python argparse
</div>
</div>
<div class="callout-body-container callout-body">
<p>The Python argparse module provides a convenient API to create commandline tools. This code is much more legible and understandable compared to how we parse arguments in say bash or zsh.</p>
<p>For instance, compare this to the argument parsing code I wrote in <a href="../aims">AIMS, my information management script</a>.</p>
</div>
</div>
<p>The script has a <code>title</code> positional argument which is mandatory. Additionally, the script can also accept a type of the post using the <code>--type</code> or <code>-t</code> flag. With the <code>--force</code> or <code>-f</code> flag, the script does not ask for any confirmation when creating files. By default, the script will open the newly created post using the default editor. However, this can be bypassed by passing the <code>--noedit</code> or <code>-x</code> flag. The script automatically creates the yaml frontmatter for the post and names it in the specified format.</p>
</section>
<section id="automatically-generating-index-pages" class="level1">
<h1>Automatically generating index pages</h1>
<p>I have two index pages on my website—the <a href="blogs">blogs</a> page which list all the blogposts I have written and the <a href="talks">talks</a> page which lists all the talks I have given in the past. Previously, I was creating these pages manually. However, with a bit of unix shell scripting, I have now managed to do this automatically!</p>
<p>I use the following script to generate the blogs and the talks index pages.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bin/create-indices</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-4" data-filename="bin/create-indices" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-4-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1">1</button><span id="annotated-cell-4-3" class="code-annotation-target"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate blogs.md</span></span>
<span id="annotated-cell-4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mktemp</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> blogs.md <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> blogs.md</span>
<span id="annotated-cell-4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> _blogs <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.md'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="annotated-cell-4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reverse</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="annotated-cell-4-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="annotated-cell-4-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandoc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_templates/index.md <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>markdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-4-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="annotated-cell-4-11"></span>
<span id="annotated-cell-4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> _templates/blogs-intro.md <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span>blogs.md</span>
<span id="annotated-cell-4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-4-14"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2">2</button><span id="annotated-cell-4-15" class="code-annotation-target"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate talks.md</span></span>
<span id="annotated-cell-4-16"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mktemp</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-4-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> talks.md <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> talks.md</span>
<span id="annotated-cell-4-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> _talks <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.md'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="annotated-cell-4-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reverse</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="annotated-cell-4-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="annotated-cell-4-21">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandoc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_templates/index.md <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>markdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-4-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="annotated-cell-4-23"></span>
<span id="annotated-cell-4-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> _templates/talks-intro.md <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span>talks.md</span>
<span id="annotated-cell-4-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="3,4,5,6,7,8,9,10,12,13" data-code-annotation="1">Steps to generate <code>blogs.md</code> file. First clean slate by removing the file if it already exists. Find all markdown files in the <code>_blogs</code> directory, and run them through pandoc with a custom markdown template (explained in more details below). Append the entires in <code>blogs.md</code> in chronological order. Note as extra precaution, we use a temporary file to prevent accidental data loss.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="15,16,17,18,19,20,21,22,24,25" data-code-annotation="2">Same as above, but create <code>talks.md</code> now.</span>
</dd>
</dl>
<p>First we find all relevant markdown pages that we want to export to html using <code>find</code>. Next, we <code>sort</code> the results in chronological order such that the latest posts show up at the top of the page. The final part is the most interesting bit. We use pandoc’s templating system to extract the date, title and abstract of each file and generate an intermediate markdown file in the format that I want each post to show on the index page. Here is the template file that I use.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_templates/index.md</strong></pre>
</div>
<pre class="pandoc" data-filename="_templates/index.md"><code># ${date} ${title}
$if(abstract)$

${abstract}

$endif$
$if(filename)$
[[html](${filename})]

$endif$</code></pre>
</div>
<p>All that is left to do is stitch everything together using <code>cat</code> to generate the final file.</p>
</section>
<section id="putting-everything-together-using-make" class="level1">
<h1>Putting everything together using <code>make</code></h1>
<p>Once the index pages are created, I use the following script to export all markdown files to html.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bin/publish</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="bin/publish" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.md"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-path</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*_templates*"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb4-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandoc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>public <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> docs/<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/%</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.md</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>.html<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
</div>
<p>The script finds all markdown files in the relevant directories, and converts them to html using pandoc. I use a custom template once again which includes some custom css and fonts of my choice.</p>
<p>Finally, to automate the entire build process I use GNU make. I have a single <code>all</code> target which simply runs the <code>create-indices</code> and <code>publish</code> scripts in the right order.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Makefile</strong></pre>
</div>
<pre class="make" data-filename="Makefile"><code>all:
    bin/create-indices
    bin/publish</code></pre>
</div>
</section>
<section id="further-optimisations" class="level1">
<h1>Further optimisations</h1>
<p>The <code>create-indices</code> script is currently sequential. You can imagine that this will keep getting slower as the number of posts increases. This step can be further optimised making the template extraction step parallel using <code>xargs</code> and then sorting the results.</p>
<p>In the <code>publish</code> script, we are converting all markdown files to html. Here, we can make the markdown file selection process smarter by using <code>git ls-files</code>. This will allow us to only select modified and untracked markdown files.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>web</category>
  <guid>https://arumoy.me/blogs/cms-pandoc/</guid>
  <pubDate>Fri, 03 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Validation with TFDV</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/remla-data-validation/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I gave this guest lecture once again in the 2023 iteration of <a href="https://se.ewi.tudelft.nl/remla/">the REMLA course</a>.</p>
</div>
</div>
<p>In this lecture we will go over the basics of data validation. The first half of this lecture will be a talk on the fundamentals of data validation. We will answer <em>what is data validation?</em>, <em>why should we validate our data?</em> and <em>how we can validate our data?</em>. The second half of the lecture will be a hands-on tutorial on using <a href="https://github.com/tensorflow/data-validation">Tensorflow Data Validation</a>, instructions &amp; code for which can be found on <a href="https://github.com/arumoy-shome/remla">this github repo</a>.</p>
<section id="what-is-data-validation" class="level1">
<h1>What is data validation?</h1>
<p>I like to think of data validation in terms of <em>expectations vs. reality</em>. When working with data, we tend to have many implicit expectations from our data and data validation allows us to make such expectations explicit but defining validation rules.</p>
<p>Another (perhaps more technical) perspective would be that data validation is equivalent to data testing. This may include testing for presence of data, the data type of the columns (<code>int</code>, <code>float</code> or <code>string</code>) and statistical tests pertaining to the distribution of the feature.</p>
</section>
<section id="why-should-we-validate-our-data" class="level1">
<h1>Why should we validate our data?</h1>
<p>Lets answer this question with an example. Lets assume we are working on a project which involves working with tabular data presented in Figure&nbsp;Figure&nbsp;1. The dataset contains several numerical features such as the <code>area</code> &amp; <code>perimeter</code> of the tumour and we want to train a model to predict whether the tumour is malignant or benign.</p>
<div id="fig-data" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/remla-data-validation/cancer-data.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Example dataset
</figcaption>
</figure>
</div>
<p>And lets say—being the ML experts that we are—we do some experimentation with various models and we manage to find one that fits the data well. We evaluate the model with a test set and achieve an acceptable value for the metric we are checking (accuracy, precision, recall or something else). Everybody is happy, you give yourself a pat on the back for a job well done, and call it a day.</p>
<p>This is a typical ML workflow which we tend to see in academia or in an educational setting. Turns out however, that the ML model related work is a single component of a much larger system as see in Figure&nbsp;Figure&nbsp;2.</p>
<div id="fig-ml-prod-components" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-ml-prod-components-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/remla-data-validation/ml-prod-components.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ml-prod-components-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: ML Production Components
</figcaption>
</figure>
</div>
<p>Continuing along with the theme of data, lets dive deeper into the data collection stage. There may be several sources of data for the model. For instance, there may be a web service which is continually scrapping the internet for data, or we may have data stored in a database, a data warehouse or data lake.</p>
<p>In addition, we may have several systems with or without ML components which our system communicates with. For instance, in Figure&nbsp;Figure&nbsp;3 our system may rely on data from another service. In return, other services may depend on the predictions from our system.</p>
<div id="fig-ml-spaghetti" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-ml-spaghetti-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/remla-data-validation/ml-spaghetti.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ml-spaghetti-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: ML Spaghetti
</figcaption>
</figure>
</div>
<p>My point here is that ML pipelines are inherently complex and tangled. They consist of several stages and the ML model work tends to be a small part of a much larger system. A small change or bug in any of the stages ripples throughout the entire pipeline. Therefore, we cannot make implicit assumptions regarding the quality of the data.</p>
<p>Continuing with the scenario of cancer detection, lets say that we have now managed to deploy our ML model in production. After a certain period of time (days, weeks or months) we may decide to re-train the model due to degrade in performance (perhaps the accuracy is lower than it used to be). The next batch of training data is typically generated by combining the unlabelled data in production with the predictions our live model is making as seen in Figure&nbsp;Figure&nbsp;4.</p>
<div id="fig-ml-prod-training" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-ml-prod-training-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/remla-data-validation/ml-prod-training.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ml-prod-training-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: ML Production Training
</figcaption>
</figure>
</div>
<p>However, what happens if we no longer track the <code>area_mean</code> feature? Or what if we start tracking the numerical features in centimetres rather than millimetres? Or what if we use comma instead of periods to denote decimals?</p>
<p>With the exception of the last example, changes are that our pipeline continues to work albeit with a degraded performance. This is because we hold several implicit expectations from our data based on the training data which was used however the data in production may tell a completely different story. Thus it is important to make such expectations explicit by validating our data and catch data quality issues from feedback loops.</p>
</section>
<section id="how-should-we-validate-our-data" class="level1">
<h1>How should we validate our data?</h1>
<p>Although data validation has existing in the domain of database management systems for a very long time, its application in ML is new and still evolving. In this part of the talk I will present the theoretical principles on which tfdv operates.</p>
<p>We first generate a <em>schema</em> from the training data. A schema defines what we want our data to look like. For instance, for our cancer dataset, the schema may specify the columns we expect in the dataset, their data types and the distribution of each feature. Next, we gather statistics from the dataset we want to validate (this can be the local test set or the live data from production). Finally, we compare the statistics against the schema to make sure that they match. Figure&nbsp;Figure&nbsp;5 puts a software engineering lens on how data validation works. The schema can be thought of as the <em>test oracle</em> and the live data is the <em>current state</em>. And we validate the two to ensure that there are no bugs in the live dataset.</p>
<p>It is important to realise that the schema generated by tfdv is best effort and the ML practitioner is still required to tweak the schema based on their understanding of the data &amp; domain expertise.</p>
<div id="fig-data-validation-how" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-data-validation-how-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/remla-data-validation/data-validation-how.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-data-validation-how-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Data Validation How
</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>data</category>
  <category>research</category>
  <category>SE4AI</category>
  <guid>https://arumoy.me/blogs/remla-data-validation/</guid>
  <pubDate>Mon, 16 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Effortless Parallel Execution with xargs &amp; Friends</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/effortless-parallel-execution-xargs/</link>
  <description><![CDATA[ 





<p>Recently, I had to run <a href="https://github.com/tensorflow/data-validation">Tensorflow Data Validation</a> on over 500 public datasets from <a href="https://kaggle.com/">Kaggle</a> to generate a baseline schema file for further analysis. I chose to do this using the xargs unix command.</p>
<p>Following is a python script which generates the schema file and saves it to disk for a single csv dataset.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>csv2schema.py</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="csv2schema.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env python</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_data_validation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tfdv</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-7"></span>
<span id="cb1-8">_CWD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.dirname(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)</span>
<span id="cb1-9">DATADIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.abspath(os.path.join(_CWD, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'..'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>))</span>
<span id="cb1-10">STATSDIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(DATADIR, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb1-11">SCHEMADIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(DATADIR, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schema'</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">name, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(sys.argv[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isfile(os.path.join(SCHEMADIR, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.proto'</span>)):</span>
<span id="cb1-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.proto'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'already exists, skipping...'</span>)</span>
<span id="cb1-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-18">    frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(os.path.join(DATADIR, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>))</span>
<span id="cb1-19">    stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfdv.generate_statistics_from_dataframe(frame)</span>
<span id="cb1-20">    schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfdv.infer_schema(stats)</span>
<span id="cb1-21">    tfdv.write_stats_text(stats, os.path.join(STATSDIR, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.proto'</span>))</span>
<span id="cb1-22">    tfdv.write_schema_text(schema, os.path.join(SCHEMADIR, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.proto'</span>))</span></code></pre></div>
</div>
<p>The script accepts as argument a valid csv file (we assume that the file names are pruned and do not contain a period character within the name, but only to denote the extension). We read the file as a pandas dataframe, generate the statistics using <code>tfdv.generate_statistics_from_dataframe</code> function and infer a schema which is stored on disk for later analysis.</p>
<p>Following is the bash shellscript wrapper which executes the python script presented above across several datasets using the <code>find</code> command. You may have to experiment with the <code>-P</code> flag which specifies the number of cores to distribute the execution across.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>"csv2schema.bash</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="&quot;csv2schema.bash" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> data/<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{schema</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">stats/train}</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> data/train <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xargs</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> 4 ./bin/write-schema.py</span></code></pre></div>
</div>
<p>That’s all there is to it! Write your main script with one file in mind, and distribute across several files using a combination of <code>find</code> and <code>xargs</code>.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <guid>https://arumoy.me/blogs/effortless-parallel-execution-xargs/</guid>
  <pubDate>Sun, 08 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Smells in Public Datasets</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/data-smells-public-datasets/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this talk I will present our recent paper titled <em>Data Smells in Public Datasets</em> which was published at the <em><a href="https://conf.researchr.org/home/cain-2022">1<sup>st</sup> International Conference on AI Engineering (CAIN) 2022</a></em>. I will first present the problem we are trying to solve along with the contributions that we made. I will present the methodology which was followed along with the results obtained. I will present a select few smells which I personally find interesting &amp; hope will generate some discussion. Finally, we will conclude the talk with some high level takeaways from our study along with the limitations &amp; future directions of work.</p>
</section>
<section id="problem-contributions" class="level1">
<h1>Problem &amp; Contributions</h1>
<div id="fig-ml-pillars" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-ml-pillars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/ml-mature-pillars.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-ml-pillars-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Pillars of ML
</figcaption>
</figure>
</div>
<p>Compared to traditional software systems—which typically mature by experiencing change in the <em>code</em>—machine learning systems experience change in the <em>code, model &amp; data</em> (Figure Figure&nbsp;1). These three pillars of change are tangled with one another, where a small change or bug in any part of the pipeline, ripples through to the downstream stages. Thus it becomes extremely important to catch such problems in the early, upstream stages of the ML lifecycle, which typically revolve around the data.</p>
<p>ML tends to be very data-centric in nature and majority of the work involves working with the data. When we put a software engineering lens on this, <strong>data for data science is equivalent to code for software engineering</strong>. While software engineers have several tools &amp; techniques to aid them in their day-to-day lives, the same cannot be said for data scientists.</p>
<p>With this study, we wish to aid data scientists with their day-to-day tasks. In line with this motivation, we first identify the recurrent data quality issues that occur in popular public datasets. Our contributions here was to provide a formal definition of data smells which we define as data anti-patterns in the datasets that may indicate early signs of problems or technical debt. Our second research question was to analyse the prevalence of such data smells in public datasets. Here we contributed by creating a catalogue of 14 data smells by analysing 25 popular public datasets.</p>
</section>
<section id="methodology" class="level1">
<h1>Methodology</h1>
<div id="fig-method" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-method-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-methodology.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-method-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Methodology
</figcaption>
</figure>
</div>
<p>As seen in Figure Figure&nbsp;2, our methodology consists of 3 distinct phases.</p>
<p>We start with the data selection phase. We used Kaggle—a popular public data repository–to identify datasets for this study. We consider structured datasets with the most number of votes which are lesser than 1GB in size for this study.</p>
<p>Next we manually conduct a preliminary analysis of the datasets. This consists of observing the <code>head</code>, the <code>tail</code> &amp; the descriptive statistics of the dataset, reading the data documentation when available and such. Through the preliminary analysis we identify the data smells. We conduct this phase twice to ensure that the older datasets are also tagged with relevant smells which were discovered during analysis of newer datasets.</p>
<p>Finally we conduct the catalogue creation phase. We hold all the data smells identified in the prior phase against a few exclusion criterion and create the final catalogue.</p>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<div id="fig-2d-histplot" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-2d-histplot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-2d-histplot.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-2d-histplot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Overview of Results
</figcaption>
</figure>
</div>
<p>Figure Figure&nbsp;3 is a two dimensional histogram with an overview of the “meta” analysis of the datasets &amp; smells. The plot presents the datasets along the X axis and the smells along the Y axis which allows us to observe the most frequent smells and where they were recorded. The plot also consists of two marginal plots. The marginal plot along the Y axis presents a count of smells across all datasets while the plot along the X axis presents the count of smells in each dataset.</p>
</section>
<section id="catalogue" class="level1">
<h1>Catalogue</h1>
<p>I will present 5 smells from the catalogue which I personally find interesting and hope will spark some discussion.</p>
<section id="correlated-features" class="level2">
<h2 class="anchored" data-anchor-id="correlated-features">Correlated Features</h2>
<div id="fig-red-corr" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-red-corr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-red-corr.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-red-corr-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Correlation of features in all datasets
</figcaption>
</figure>
</div>
<p>I will start with the presence of correlated features smell which many of us are perhaps already familiar with. I want to start with this smell as it was most frequently observed in our sample of datasets.</p>
<p>When two features A &amp; B are correlated, inducing a positive or negative change in A does the same in B. This presents an opportunity to perform feature engineering and construct a more efficient dataset. ML is highly experimental and any optimisation—no matter how smalls—counts. Small datasets ultimately are easier to understand, faster to train a model on &amp; take up less storage.</p>
</section>
<section id="presence-of-sensitive-features" class="level2">
<h2 class="anchored" data-anchor-id="presence-of-sensitive-features">Presence of Sensitive Features</h2>
<div id="fig-misc-sensitive" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-misc-sensitive-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-misc-sensitive.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-misc-sensitive-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Sensitive features
</figcaption>
</figure>
</div>
<p>I want to motivate this smell with this figure. This is a probability density plot from the adult census dataset. This dataset consists information regarding individuals including their race &amp; sex. The supervised learning task is to predict the income class they belong to.</p>
<p>Lets focus primarily on the top left plot which shows that for this dataset, a male individual of fairer skin is likely to earn more. Such a bias also exist between male &amp; female individuals of the same race. A model trained &amp; tested on this dataset will perform well however putting such a model in production will result in devastating consequences since the model was trained using biased historical data which does not reflect the real world.</p>
<p>And we see examples of this in the real world, when financial institutes use ML to predict if an individual is entitled to a loan, or when the criminal justice system want to predict the severity of sentencing and when police try to identify if an individual is a threat using video surveillance.</p>
</section>
<section id="hierarchy-from-label-encoding" class="level2">
<h2 class="anchored" data-anchor-id="hierarchy-from-label-encoding">Hierarchy from Label Encoding</h2>
<div id="fig-cat-hierarchy" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cat-hierarchy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-cat-hierarchy.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cat-hierarchy-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Hierarchy from label encoding
</figcaption>
</figure>
</div>
<p>Figure Figure&nbsp;6 presents a probability density plot from the adult census dataset. Here we compare the income class of individuals to their level of education. We can see that for this dataset, an individual with a higher level of education is likely to earn more.</p>
<p>Such a hierarchy in categorical features is useful information which can be utilised by the model. A common practise is to encode categorical features using numbers. As an example we can encode the education levels using numbers between 0 and 4, where higher education gets a larger number. Such an encoding scheme can be beneficial to the model as it exposes the hierarchy amongst the values of a categorical feature. However applying the same encoding scheme for the <em>race</em> or <em>sex</em> feature can introduce an unwanted hierarchy amongst the values where non should exist.</p>
</section>
<section id="binary-missing-values" class="level2">
<h2 class="anchored" data-anchor-id="binary-missing-values">Binary Missing Values</h2>
<div id="fig-misc-bin" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-misc-bin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-miss-bin.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-misc-bin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Binary missing values
</figcaption>
</figure>
</div>
<p>Two features from the permit dataset contain a lot of missing values (over 90% of the data in these features are missing). A common technique in such cases is to drop such features since they do not impart any knowledge to the model. However, taking a closer look at the value of the non-missing data, we find that the missing values in these features carry an implicit meaning of ‘no’ or a negative response.</p>
<p>Attention must be paid to the distribution of the missing values. If the missing values are concentrated within a specific feature (along columns) as opposed to being evenly distributed across the dataset (along columns &amp; rows), it may indicate that they carry an implicit meaning. A novice data scientist may hastily drop such features however in doing so they alter the original information portrait by dataset.</p>
</section>
<section id="strings-in-human-friendly-formats" class="level2">
<h2 class="anchored" data-anchor-id="strings-in-human-friendly-formats">Strings in Human-friendly Formats</h2>
<div id="fig-str-human" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-str-human-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/data-smells-public-datasets/data-smells-str-human.svg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-str-human-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Strings in human-friendly formats
</figcaption>
</figure>
</div>
<p>The <em>netfix</em> dataset contains information regarding content on the popular entertainment streaming service. The dataset contains information regarding movies &amp; TV shows along with their duration.</p>
<p>Although the duration for movies can be easily converted to a numerical representation, doing the same for TV shows poses several challenges and requires further effort and domain expertise.</p>
</section>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<p>In this section I will present two high level observations from this study.</p>
<section id="lack-of-proper-documentation" class="level2">
<h2 class="anchored" data-anchor-id="lack-of-proper-documentation">Lack of Proper Documentation</h2>
<p>We saw several instances where a lack of proper documentation was felt. The <em>heart</em> dataset contains very cryptic column names and understanding the information contained within these column require domain expertise. The <em>sex</em> feature within the same dataset is label encoded however we do not know which number represents which gender. The <em>cancer</em> dataset contains several numerical features but we do not know the unit in which the measurements were recorded.</p>
<p>Every dataset is unique &amp; contains its own idiosyncrasies and we require proper documentation to understand them. Documentation provides useful metadata &amp; context to data scientists who are getting started with a dataset &amp; also help re-familiarise them to the dataset quickly when they come back at a later time.</p>
</section>
<section id="lack-of-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="lack-of-best-practices">Lack of Best Practices</h2>
<p>We also found several instances of technical debt from lack of best practices in upstream processes. Going back to the <em>netflix</em> dataset where extracting numerical duration for TV shows was found to be challenging, or the <em>heart</em> dataset with its cryptic column names and the <em>cancer</em> dataset where the unit was not recorded. In all these instances, technical debt could have been avoided by simply using better column names or providing documentation. By following standardised procedures in the upstream data collection/creation stages, technical debt in the downstream stages can be avoided.</p>
<p>We feel that data smells can help identify such sources of technical debt in the early stages of a ML pipeline where the complexity is relatively lower, and fixes are cheaper and easier to implement. This becomes especially important when working with external stakeholders within financial constraints.</p>
</section>
</section>
<section id="limitations-future-work" class="level1">
<h1>Limitations &amp; Future Work</h1>
<p>Lets take a look at the limitations of our current study and directions for future work.</p>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<p>We opted for a <em>shallow</em> as opposed to a <em>deep</em> analysis of this datasets. This means that we did not fit a model to each dataset and carry out a supervised learning task. While such a workflow may reveal more smells, we believe that the smells also become specific to the dataset, model or problem we are trying to solve. Our intention was to pick the smallest subset of analysis tasks that can be scaled across several datasets.</p>
<p>The smells are linked to the version of the dataset analysed. Unfortunately this is true for all data-centric work. However we do our best to make our results reproducible by providing the version of the data that was analysed in our paper.</p>
<p>We do not know the impact of the smells. For instance, if we consider the missing units smell, we do not know if and to what extent this smell affects the performance of a model. This was considered beyond the scope of this project however remains to be a viable extension to our current work.</p>
<p>Finally, smells are subjective to the human. But this is true for code smells as well. Not all long methods are bad and god classes still exist in public software projects.</p>
</section>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future Work</h2>
<p>Growing the catalogue using more datasets is a low-hanging fruit. It would also be interesting to explore the notion of smells for semi-structured and unstructured datasets. Finally, it would be interesting to understand the co-occurance and evolution of smells throughout the ML lifecycle.</p>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>data</category>
  <category>research</category>
  <category>SE4AI</category>
  <category>technical debt</category>
  <guid>https://arumoy.me/blogs/data-smells-public-datasets/</guid>
  <pubDate>Wed, 04 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>There and Back Again A Tale of Website Management</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/website-management-pandoc/</link>
  <description><![CDATA[ 





<p>After years of using <a href="https://orgmode.org">orgmode</a> along with the <a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">org-publish</a> package to run my website, I came back to markdown, shell &amp; vim.</p>
<p>In my humble shell dwelling days—before I began my journey into Emacs land—I was using <a href="https://jekyllrb.com/">Jekyll</a>. Rather, I was fighting with it. Github requires a <code>CNAME</code> file in the directory from which the website should be served. Now, the <code>github-pages</code> gem can be used to instruct Github Pages (GHP) to automatically build and serve the website. But I faced several challenges getting the compatible versions of the <code>github-pages</code>, <code>jekyll</code> and <code>ruby</code> to match.</p>
<p>I decided to forgo this madness and just use html &amp; css to build my website. I used org-publish to accomplish this using the following setup in my <code>init.el</code>.</p>
<p>See <a href="TODO">the documentation for <code>org-publish-project-alist</code></a> on how to setup org-publish.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.emacs.d/init.el</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="~/.emacs.d/init.el" style="background: #f1f3f5;"><pre class="sourceCode lisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-publish-project-alist</span>
<span id="cb1-2"> '((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org"</span> :components (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org-posts"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org-static"</span>))</span>
<span id="cb1-3">   (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-posts"</span></span>
<span id="cb1-4">    :base-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy"</span></span>
<span id="cb1-5">    :base-extension <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org"</span></span>
<span id="cb1-6">    :publishing-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy/docs/"</span></span>
<span id="cb1-7">    :section-numbers <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nil</span></span>
<span id="cb1-8">    :auto-preamble <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span></span>
<span id="cb1-9">    :auto-sitemap <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span></span>
<span id="cb1-10">    :html-head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;link rel=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">stylesheet</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> href=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">assets/css/main.css</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> type=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">text/css</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/&gt;"</span></span>
<span id="cb1-11">    :publishing-function org-html-publish-to-html)</span>
<span id="cb1-12">   (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-static"</span></span>
<span id="cb1-13">    :base-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy/assets"</span></span>
<span id="cb1-14">    :base-extension <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"css</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|js</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|png</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|jpg</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|gif</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|pdf</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|mp3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|ogg</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|swf"</span></span>
<span id="cb1-15">    :publishing-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy/docs/assets/"</span></span>
<span id="cb1-16">    :recursive <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span></span>
<span id="cb1-17">    :publishing-function org-publish-attachment)</span>
<span id="cb1-18">   (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-cname"</span></span>
<span id="cb1-19">    :base-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy/"</span></span>
<span id="cb1-20">    :base-extension <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-21">    :publishing-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/code/arumoy/docs/"</span></span>
<span id="cb1-22">    :include (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CNAME"</span>)</span>
<span id="cb1-23">    :publishing-function org-publish-attachment)</span>
<span id="cb1-24">   (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website"</span> :components (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-posts"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-static"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"website-cname"</span>))))</span></code></pre></div>
</div>
<p>Since org-publish wipes the <code>:publishing-directory</code> clean prior to each build, I copy the <code>CNAME</code> file back in there.</p>
<p>I was very pleased with its simplicity and its text-centric nature. The fact that it just worked out of the box was a pleasant surprise. However this intricate setup only worked in Emacs and this did not sit well with me. So I decided to find a more universal solution and landed on <a href="https://pandoc.org/">Pandoc</a>.</p>
<p>Pandoc has the <code>--standalone</code> flag which produces a document which is valid on its own (think HTML documents with header and footer). One can write custom templates to produce documents styled to their liking. The default template can be viewed using <code>pandoc -R FORMAT</code>. A custom template can be specified using the <code>--template</code> flag. See <a href="https://pandoc.org/MANUAL.html#templates">section on templates</a> in the pandoc manual for more info.</p>
<p>Following the advice laid out by <a href="Web design in 4 minutes">https://jgthms.com/web-design-in-4-minutes/</a>, I designed a minimal pandoc custom template which you can find my in <a href="https://github.com/arumoy-shome/dotfiles">dotfiles</a> repo.</p>
<p>My current workflow comprises of authoring content in markdown which I edit in vim. I use GNU make to automate the html generation using pandoc. The contents of my Makefile are as follows.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Makefile</strong></pre>
</div>
<pre class="make" data-filename="Makefile"><code># Taken from &lt;https://gist.github.com/kristopherjohnson/7466917&gt;

SRCFILES:= $(wildcard *.md)
PUBFILES=$(SRCFILES:.md=.html)

%.html: %.md
    pandoc --template=public -o docs/$@ $&lt;

# Targets and dependencies

.PHONY: all clean

all : $(PUBFILES)

clean:
    rm $(PUBFILES)</code></pre>
</div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>vim</category>
  <category>web</category>
  <guid>https://arumoy.me/blogs/website-management-pandoc/</guid>
  <pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Timestamps in the Shell (today)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/today/</link>
  <description><![CDATA[ 





<p>I often work with text files containing pros (such as blog posts and git commit messages) and require adding a timestamp containing the current date, day &amp; time.</p>
<p>I wrote <code>today</code>, a shellscript which returns the current date in various formats. Here is the script as of 2022-03-09, the latest version can be found in my <a href="https://github.com/arumoy-shome/dotfiles">dotfiles</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>today</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="today" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># today: return today's date in various formats</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usage: today [OPTS]</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without any options, today will print today's date in %Y-%m-%d</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format. Following are the supported options:</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    --with-day: %Y-%m-%d %a</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    --with-time: %Y-%m-%d %H:%M</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    -l | --long: %Y-%m-%d %a %H:%M</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    -h | --human: %a %b %d, %Y</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    -s | --stamp: enclose the date in square braces</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: when using both --with-day &amp; --with-time, the order in which</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the options are passed matters. For example:</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># today --with-day --with-time will produce</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    2022-03-03 Thu 02:20</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But today --with-time --with-day will produce</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2022-03-03 02:21 Thu</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: when using --human option, all other options are ignored.</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">main()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb1-26">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FMT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-%d'</span></span>
<span id="cb1-27">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">STAMP_FLAG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># false</span></span>
<span id="cb1-28"></span>
<span id="cb1-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb1-31">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--with-day</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FMT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FMT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %a"</span></span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-34">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--with-time</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FMT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FMT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M"</span></span>
<span id="cb1-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-37">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-s</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--stamp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb1-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">STAMP_FLAG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># true</span></span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-40">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-l</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--long</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># short for --with-day --with-time</span></span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FMT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FMT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %a %H:%M"</span></span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-43">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-h</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--human</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alternate format, ignore other flags</span></span>
<span id="cb1-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FMT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%a %b %d, %Y"</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-46">      <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb1-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: unknown option </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">shift</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only shift here since we only pass flags</span></span>
<span id="cb1-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb1-51"></span>
<span id="cb1-52">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FMT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-53"></span>
<span id="cb1-54">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$STAMP_FLAG</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$OUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb1-55"></span>
<span id="cb1-56">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$OUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb1-58"></span>
<span id="cb1-59"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">main</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>Without any arguments, <code>today</code> prints the date in ‘%Y-%m-%d’ format. Using the following optional flags the output can be manipulated.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>flag</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>–with-day</td>
<td>‘%Y-%m-%d %a’</td>
</tr>
<tr class="even">
<td>–with-time</td>
<td>‘%Y-%m-%d %H:%M’</td>
</tr>
<tr class="odd">
<td>–long</td>
<td>‘%Y-%m-%d %a %H:%M’</td>
</tr>
<tr class="even">
<td>–human</td>
<td>‘%a %b %d, %Y’</td>
</tr>
</tbody>
</table>
<p>The <code>--stamp</code> flag can be used to optionally wrap the output in square braces.</p>
<p>I frequently use this to add a timestamp to my git commit messages.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feat: timestamps from the shell </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">today</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Or insert a timestamp into the current buffer I am editing in vim.</p>
<pre class="vim"><code>:r! today -l -s</code></pre>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/today/</guid>
  <pubDate>Thu, 03 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Aru’s Information Management System (AIMS)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/aims/</link>
  <description><![CDATA[ 





<p>AIMS or Aru’s Information Management System is a collection of shellscripts to manage information in plaintext. It is inspired by <a href="https://orgmode.org/">org-mode</a>, and tries to replicate a subset of its functionalities which I frequently use. AIMS is completely tuned towards my workflow as a researcher and how I manage my digital notes.</p>
<p>Although org-mode is great, the primary motivation for writing AIMs is because I was feeling a lot of resistance when trying to tune it to my workflow, primarily because of Elisp. Org-mode also requires that you use Emacs as your text editor. I did not appreciate the “vendor lock-in” enforced by org-mode.</p>
<p>You can find the latest version of the script on my <a href="https://github.com/arumoy-shome/dotfiles/blob/master/bin/aims">dotfiles repo</a>, below is the script as it stands on 2022-02-28.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>aims</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-1" data-filename="aims" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-1-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">NOTESDIR</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/org"</span></span>
<span id="annotated-cell-1-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INBOX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$NOTESDIR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/inbox.md"</span></span>
<span id="annotated-cell-1-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TEMPLATESDIR</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$XDG_DATA_HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/aims"</span></span>
<span id="annotated-cell-1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INBOX</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INBOX</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-7"></span>
<span id="annotated-cell-1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__capture()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="annotated-cell-1-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture incoming info quickly. All items are appended to INBOX</span></span>
<span id="annotated-cell-1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which defaults to `inbox.md' in NOTESDIR. Optionally a template</span></span>
<span id="annotated-cell-1-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can be specified using the --template| -t flag.</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-12" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TEMPLATE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TEMPLATESDIR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/default"</span></span>
<span id="annotated-cell-1-13"></span>
<span id="annotated-cell-1-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="annotated-cell-1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="annotated-cell-1-16">      <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">--template</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-t</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">shift</span></span>
<span id="annotated-cell-1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TEMPLATE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TEMPLATESDIR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="annotated-cell-1-20">      <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: unknown option </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="annotated-cell-1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="annotated-cell-1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">shift</span></span>
<span id="annotated-cell-1-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="annotated-cell-1-26"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-27" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ITEM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mktemp</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-1-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TEMPLATE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-x</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TEMPLATE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TEMPLATE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ITEM</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-31"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-32" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$EDITOR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -c 'set ft=markdown' </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ITEM</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$NOTESDIR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INBOX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$NOTESDIR</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ITEM</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INBOX</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Info: captured in </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INBOX</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="annotated-cell-1-36">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-1-37"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="5">5</button><span id="annotated-cell-1-38" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Info: cleaning up </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ITEM</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-1-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="annotated-cell-1-40"></span>
<span id="annotated-cell-1-41"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__capture</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$@</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3,4,5,6" data-code-annotation="1">Store all notes in <code>$HOME/org/inbox.md</code>, creating it if necessary. Also look for template scripts in <code>~/.local/share/aims</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="12,14,15,16,17,18,19,20,21,22,23,24,25" data-code-annotation="2">Parse the flags passed to AIMS. Currently it only supports the <code>--template</code>/<code>-t</code> flag which accepts the name of the template to use. Use the <code>default</code> template if none is provided. More on this later.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="27,28,29,30" data-code-annotation="3">Create a temporary file and insert the contents of the template.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="32,33,34,35,36" data-code-annotation="4">Edit the temporary file using <code>$EDITOR</code> (here I assume its vim or neovim), setting the filetype to markdown. If the first positional argument passed to AIMS is a valid file inside <code>$NOTESDIR</code> then set that to the <code>$INBOX</code> file. Finally, prepend the contents of the temporary file to <code>$INBOX</code> file, if vim does not report an error.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="38" data-code-annotation="5">Cleanup, remove the temporary file.</span>
</dd>
</dl>
<p>For the time being, it only provides the capture functionality. A temporary file is used to compose the text first. Upon successful completion, the contents of the temporary file are appended to the default <code>$INBOX</code> file if no other files are specified.</p>
<p>What I find really neat is the templating system. An arbitrary name for a template can be passed to <code>aims</code> using the <code>--template</code> (or <code>-t</code> for short) flag. <code>aims</code> looks for a shellscript with the same name in the <code>~/.local/share/aims</code> directory and executes it if it exists. The beauty of this design is in its simplicity. Since templates are shellscripts, it gives us the full expressiveness of the shell. This is best demonstrated with some examples. Here is my <code>default</code> template as of 2022-02-28 which is used when no template is specified.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>~/.local/share/aims/default</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-2" data-filename="~/.local/share/aims/default" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-2-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1">1</button><span id="annotated-cell-2-3" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-2-4"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2">2</button><span id="annotated-cell-2-5" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-2-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# [</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-%d %a %H:%M'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="3" data-code-annotation="1">Sanity check, ensure that a positional argument was passed (that is, the temporary file path).</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="5,6" data-code-annotation="2">Insert an empty line and a level 1 markdown header with a time stamp.</span>
</dd>
</dl>
<p>It simply adds a level 1 markdown header followed by a timestamp. Here is another for capturing bibtex information for research papers.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><a href="../aocp">I also wrote aocp.el</a>, an emacs package to capture bibtex information of research papers using org-mode.</p>
</div>
</div>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-3-4"></span>
<span id="annotated-cell-3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-6"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1">1</button><span id="annotated-cell-3-7" class="code-annotation-target"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">BIBKEY</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pbpaste</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^@.*'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/^@.*{\(.*\),/\1/'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BIBKEY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-3-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# [</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-%d %a %H:%M'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">] </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BIBKEY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="annotated-cell-3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="annotated-cell-3-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# [</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-%d %a %H:%M'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="annotated-cell-3-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-3-13"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2">2</button><span id="annotated-cell-3-14" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ **Problem Statement:**'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ **Solution**'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ **Results**'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ **Limitations**'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ **Remarks**'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3">3</button><span id="annotated-cell-3-21" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'```bibtex'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-22"></span>
<span id="annotated-cell-3-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BIBKEY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="annotated-cell-3-24">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pbpaste</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/^$/d'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="annotated-cell-3-25">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pbcopy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BIBKEY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="annotated-cell-3-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="annotated-cell-3-27"></span>
<span id="annotated-cell-3-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'```'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="7,8,9,10,11,12" data-code-annotation="1">Check that the bibtex information is currently in the system clipboard by attempting to extract the key using <code>grep</code> and <code>sed</code>. If a key was successfully extracted, then create a level 1 markdown header with a time stamp and the key. Otherwise, fall back to just a time stamp.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="14,15,16,17,18,19,20" data-code-annotation="2">Add my prompts for note-taking when reading scientific papers.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="21,23,24,25,26,28" data-code-annotation="3">Remove empty lines and put the bibtex information in a markdown source block.</span>
</dd>
</dl>
<p>This one is a bit more involved but highlights the power of using shellscripts for templating. Given that a bibentry is copied in the clipboard, this template adds a level 1 markdown header with a timestamp and the bibkey. It adds my <a href="../research-workflow#writing-notes">note-taking prompts</a> and sticks the bibentry at the bottom.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>shell</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/aims/</guid>
  <pubDate>Mon, 28 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Privacy Preserving Deep Learning</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/privacy-preserving-deep-learning/</link>
  <description><![CDATA[ 





<p>Good morning all, thank you for being here. Today I wanted to share my research on Privacy Preserving Deep Learning (PPDL) which I conducted during my Msc. As an example, we will be looking specifically at PPDL for Medical Image Analysis (MIA). However, I think that this field of research is highly relevant these days and the techniques can be applied to any domain working with sensitive data (such as governance, finance and others).</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Medical Imaging is the process of generating an internal representation of a human body (using MRI, CT or PET scans) for further analysis in order to detect anomalies (if any exist).</p>
<section id="challenges-of-mia" class="level2">
<h2 class="anchored" data-anchor-id="challenges-of-mia">Challenges of MIA</h2>
<p>MIA concerns itself with the study of medical images in order to determine Regions of Interest(ROI) and image segmentation. MIA is usually performed by radiologists and requires intensive training and practise. For each patient, a radiologist may have to inspect more than 100 images. This is a repetitive task and may pose a cognitive strain, making the process prone to human errors.</p>
<p>MIA is limited by the skills and cognitive fitness of the human performing the analysis. While humans may not be so good in performing repetitive tasks, machine will do them tirelessly and consistently.</p>
<p>This is where Deep Learning (DL) comes into the picture. DL gained popularity and momentum both in the industry and academia due to it’s success with image classification through the ImageNet challenge. It was soon adopted not only within MIA but also other fields of medical science. Although this is an active field of research, several challenges remain. One of the challenges is to train DL models without violating the privacy of the patients.</p>
</section>
<section id="challenges-of-dl-in-mia" class="level2">
<h2 class="anchored" data-anchor-id="challenges-of-dl-in-mia">Challenges of DL in MIA</h2>
<p>DL models require a lot of data for training, generally the more data used, better the prediction results. However, this quantity of data may not always be available at a single medical institute (for instance at small hospitals located in remote locations). Larger institutes who have sufficient data are able to train models however these models are subjected to bias. This is because the data does not accurately represent the entire population. Moreover, if the institute is specialized in a specific disease or observes a disease more frequently due to it’s unique geographic location, the data is biased.</p>
<p>Thus DL models need to be trained using data from several institutes. The traditional server-client architecture posses several privacy and security concerns. Once the institutes upload their data to a server, they may lose their data governance and ownership rights as the server may be located in a different geographical location with a different set of jurisdictions. The data upload and storage procedure may also not be transparent thus raising concerns regarding it’s safety and security.</p>
<p>Although efforts have been made to create centralized medical data repositories (eICU Collaborative Research Database and The Cancer Genome Atlas), data privacy laws such as GDPR in Europe and HIPAA in the State pose a large overhead. The data in such repositories are anonymised, but this does not guarantee security against privacy leaks. Datasets have a unique statistical fingerprint making them vulnerable to linkage attacks.</p>
<p>Distributed Learning addresses the data ownership and governance problems of centralised learning. However, it still needs to utilise data privacy and security techniques to ensure privacy of patient records. In the following sections of this talk we will take a closer look at Distributed Learning and data privacy techniques for PPDL.</p>
</section>
</section>
<section id="study-design" class="level1">
<h1>Study Design</h1>
<div id="fig-study-design" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-study-design-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/study-design.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-study-design-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Study Design
</figcaption>
</figure>
</div>
<p>The goal of this research project was to conduct a systematic review of DL systems for MIA which take the privacy of the patients into account. Figure Figure&nbsp;1 presents an overview of the study design. Emphasis was also put on analysis of these privacy-preserving techniques to determine those which provide good performance, are scalable and robust, and provide maximum protection against security threats. To this end, the following research questions are formulated:</p>
<ol type="1">
<li>What are the existing systems, platforms or techniques that facilitate deep learning on medical images that do not invade the patient’s privacy?</li>
<li>What are the top performing DL models being used to perform tasks in medical imaging?</li>
<li>What are the specific attacks that can compromise the security of these systems?</li>
<li>What is the amount of data leakage in these systems?</li>
</ol>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<section id="data-privacy-techniques" class="level2">
<h2 class="anchored" data-anchor-id="data-privacy-techniques">Data Privacy Techniques</h2>
<p>To date, anonymisation and de-identification remain the predominant privacy-preserving technique for sharing sensitive information. Although there are not standardised methods of doing so, we commonly see 3 techniques in the literature:</p>
<ol type="1">
<li>De-identification or removal of sensitive information from datasets. This is not the best solution since it results in loss of valuable information which may be useful for analysis/training.</li>
<li>Pseudo-anonymisation which replaces sensitive information with unique pseudonyms. This is a bit better since we retain the unique linkages and correlations between data points which may be of interest to us.</li>
<li>Anonymisation which simply put means de-identification with a cherry on top. A few additional things are done on top of de-identification to significantly reduce the probability of re-identification.</li>
</ol>
<p>Differential Privacy (DP) preserves the privacy of patients by injecting a certain quantity of noise into the data. This allows for statistical analysis to be conducted without compromising sensitive information. A trade-off between privacy and performance occurs here. More perturbations in the dataset give higher privacy however may negatively affect the model’s performance.</p>
<p>The alternative is to encrypt the data or the model parameters. The state-of-the-art encryption schemes cannot be cracked using brute force techniques making them the most secure means of sharing sensitive information. The Homomorphic Encryption (HE) scheme allows certain operations (such as addition, subtraction and multiplication) to be carried out directly over the cyphertext. This is beneficial for neural networks as models can be trained directly using encrypted, unperturbed data with additional computational overhead.</p>
</section>
<section id="security-threats-attacks" class="level2">
<h2 class="anchored" data-anchor-id="security-threats-attacks">Security Threats &amp; Attacks</h2>
<p>Anonymisation techniques are built into MIA software which may explains their popularity. However, anonymised data contain unique statistical fingerprints which make them vulnerable to linkage attacks. A famous example is the Netflix Prize Dataset where researchers were able to combine Netflix’s anonymised user subscription data with the imdb public dataset to identify specific people along with their political preferences and other sensitive information. Another well known example is linkage attack on anonymised hospital records from the State of California along with public voter records to identify the complete medical history of the Governor of California.</p>
<p>In traditional software, computers strictly follow a specific set of programmed instructions. In contrast, ML algorithms derive their own set of rules based on a substantial amount of data provided to them. This behaviour often leads to neural networks being interpreted as a black box, preventing users from understanding it’s inner workings. This black box behavior makes neural networks a potential target for exploitation. This identification of such threats and vulnerabilities must be prioritised.</p>
<p>These threats can be classified as ones targeting the data and others targeting the model. Adversarial examples are inputs that are often indistinguishable from typical inputs, yet contain intentional feature changes that lead to incorrect classification. Adversarial attacks are of significance since they question the robustness of DL models. They can have devastating consequences for DL applications in high-stakes applications such as medical imaging, facial recognition and autonomous vehicles.</p>
<p>Data poisoning refers to changing the training data such that the model can learn with malicious intent and manifest that as it’s predictions. Open access and public datasets are especially vulnerable to data poisoning. Such datasets are often used to validate proof-of-concept models by companies or worse, to validate bleeding edge innovations in research.</p>
<p>In addition to attacks which target the data, the DL model itself can be exploited. By observing the gradients and parameters of a trained network, parts of the dataset can be obtained. Model inversion, membership inference and reconstruction attacks often utilise this technique to obtain the training data or infer if a public dataset was used for training. Combined with linkage attacks, the presence of an individual in a dataset and their sensitive information can be obtained.</p>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-training-techniques" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-training-techniques-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/training-techniques.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-training-techniques-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Training techniques using sensitive data
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-distributed-learning" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-distributed-learning-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/distributed-learning.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-distributed-learning-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Distributed training techniques
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The study identified 15 papers that presented techniques to train DL models using sensitive data (summarised in Figure Figure&nbsp;2). The techniques can be broadly classified as:</p>
<ol type="1">
<li>centralised training,</li>
<li>synthetic data generation and</li>
<li>distributed training.</li>
</ol>
<p>The majority of the solutions adopted a distributed training approach and this is what the rest of the talk will focus upon.</p>
<p>As seen in Figure Figure&nbsp;3 Distributed training can be broadly categorised as</p>
<ol type="1">
<li>asynchronous and</li>
<li>synchronous training techniques.</li>
</ol>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-smpc-fl" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-smpc-fl-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/smpc-fl.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-smpc-fl-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Asynchronous techniques
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-fl-variants" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-fl-variants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/fl-variants.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-fl-variants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: FL variants
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Figure Figure&nbsp;4 provides a high-level overview of the asynchronous techniques. There are predominantly two popular techniques: Federated Learning (FL) and Secure Multi Party Computing (SMPC). Both techniques share the same guiding principles. Several models are training in parallel using the institute’s data. The parameters of these models are then aggregated, usually in a central server, and finally the aggregated parameters are sent back to the local models.</p>
<p>It’s worth nothing that all asynchronous training techniques introduce additional data privacy through DP or HE to reduce data leakage.</p>
<p>There are several flavours of FL (as seen in Figure Figure&nbsp;5), the most popular being shared gradients and shared weights. However, there is a third which shows promising results and that is the shared layers. We will talk more about FL with shared layers later in the talk.</p>
<div id="fig-sync-training" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sync-training-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/sync-training.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sync-training-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Synchronous techniques
</figcaption>
</figure>
</div>
<p>Figure Figure&nbsp;6 presents the three prominent synchronous training techniques:</p>
<ol type="1">
<li>model ensemble (ME)</li>
<li>single weight transfer (SWT) and</li>
<li>cyclic weight transfer (CWT)</li>
</ol>
<p>In ME, models are trained individually at institutes and a final result is obtained using an ensemble technique (voting, averaging, etc.). In SWT, a single model is trained at each institute only once in a pre-determined or random order. CWT extends SWT by training the model at each institute one or more times.</p>
<p>Empirical evidence suggests that CWT has the best performance and robust to overfitting. SWT performs second best but is prone to catastrophic forgetting and ME is least performant.</p>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-sync-async-learning" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sync-async-learning-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/sync-async-learning.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sync-async-learning-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Synchronous vs.&nbsp;asynchronous learning
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-homomorphic-differential" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-homomorphic-differential-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/homomorphic-differential.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-homomorphic-differential-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Homomorphic vs.&nbsp;differential privacy
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>As summarised in Figure Figure&nbsp;7 We observe a trade-off between synchronous and asynchronous learning. Occam’s Razor dictates that CWT being the simpler solution be chosen where possible. However, as we scale the number of institutes, after a certain threshold, the added complexity of asynchronous learning becomes feasible. This threshold is however unknown. Research is also lacking to determine the scalability of asynchronous learning techniques.</p>
<p>Coming to data privacy techniques, DP and HE are observed to be the most popular techniques for data privacy. DP introduces a trade-off between the model’s performance by injecting noise into the parameters for better privacy.</p>
<p>In contrast, HE enables model training over unperturbed and encrypted parameters. The performance-privacy trade-off is lifted in lieu of added computational costs. It is recommended to use HE when privacy is of the utmost importance and runtime is not of significant.</p>
<div id="fig-pyramid" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pyramid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/pyramid.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pyramid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Pyramid of distributed learning for sensitive data
</figcaption>
</figure>
</div>
<p>Figure Figure&nbsp;9 presents an overview of the findings of this literature survey. Distributed Learning is able to drastically reduce the data leakage compared to centralised learning however they are still vulnerable to model inversion and inference attacks. Additional security can be provided using DP and HE for the model parameters. HE is resistant to brute force attacks. However if an attacker obtains a significant quantity of the plaintext and the corresponding cyphertext, the encryption can be cracked. Even if we secure the model parameters, the data itself is still vulnerable to adversarial attacks and data poisoning.</p>
<p>PPDL is felt to be paradoxical in nature. Although the field aims to develop learning techniques which respect the patient’s privacy, such data is not easily available. The existing research is thus limited to experiments conducted using centralised data repositories which do not accurately represent the domain shift which is observed in a truly distributed dataset. The result is also limited primarily to MLPs and CNNs using SGD to perform classification tasks. There is need for training other network architectures (GNNs and RNNs) using modern optimization algorithms such as AdaGrad, Adam and RMSProp.</p>
<p>If such a distributed system is built, the ownership of such a system is unclear. Who would be responsible for it’s construction and maintenance? How will the project be funded? And where will the parameter server be located? Such a project requires a joint initiative from all participating institutes but also warrants the development of legislative policies to ensure a fair and conflict free operation. Small medical institutes have the most to gain from such an infrastructure however concerns regarding their access is raised since they are unable to participate.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<div id="fig-summary" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-summary-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://arumoy.me/blogs/privacy-preserving-deep-learning/summary.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-summary-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Lifecycle of PPDL
</figcaption>
</figure>
</div>
<p>We observe the following lifecycle of PPDL, summarised in Figure Figure&nbsp;10. We start with data owners who are geographically distributed and protected by different privacy laws &amp; regulations. We can use distributed learning techniques which result in a better model performance without compromising data ownership and drastically reducing data leakage compared to centralised learning. The risks of inversion and inference attacks can be minimised with data privacy techniques however we must also safeguard the data itself as it’s vulnerable to adversarial attacks and data poisoning.</p>
</section>
<section id="future-work" class="level1">
<h1>Future Work</h1>
<p>I want to end this talk by highlighting some of the interesting opportunities of research in PPDL.</p>
<p>FL with shared gradients or weights communicate twice: once to send the local parameters and again to download the aggregated parameters. Scaling the number of participants of increasing the depth of the networks raises several challenges. In the shared layers scheme, the local models have the input and the first hidden layer (L<sup>input</sup> &amp; L<sup>1</sup>). The remaining hidden layers are kept in the central server (L<sup>2</sup>..L<sup>n</sup>). Although the local models communicate twice as much, since they only transmit the parameters of a single layer (as opposed to the entire model), the communication overhead is significantly reduced. Since majority of the layers reside in a central server, hardware upgrades are only required in the central server for performance gains. Empirical results are however lacking to compare and contrast them with shared gradients.</p>
<p>By and large, Medical Imaging data such as MRI and CT scans, are volumetric in nature. The state-of-the-art solutions require the three dimensional data be segmented into a two dimensional format, resulting in loss of valuable information. Geometric Deep Learning (GDL) is a new field of research, focused on developing deep learning models which are able to train using volumetric data. As such, the application of GDL to MIA remains open for further investigation.</p>
<p>The exact inner workings of neural networks are still unclear, thereby raising serious ethical concerns regarding their application in medical science. Hybrid intelligence is a new field of research which seeks to enhance the human intellect using artificial intelligence, rather than replacing it. Additionally, Bayesian Deep Learning is another exciting field of research which is tasked with the creation of DL models that provide a measure of uncertainty to the predictions they make. Developments in these field may be beneficial to privacy-preserving deep learning since it will enable humans to view the outcomes of neural networks with a sense of trust.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>machine learning</category>
  <category>research</category>
  <category>privacy</category>
  <guid>https://arumoy.me/blogs/privacy-preserving-deep-learning/</guid>
  <pubDate>Tue, 07 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Research Workflow in Plaintext</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/research-workflow-plaintext/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this talk I will go over how we can use Emacs and org-mode to craft a research workflow. We will look at how we can leverage the power of Emacs and org-mode to capture, store, search and retrieve research data, all in plain text! The talk will touch upon how org-mode can be used as an environment for literate programming and reproducible research. I do not assume any prior knowledge of emacs or org-mode and I want this to be more of a discussion rather than a talk. Please ask me questions as I go along and share your thoughts, tips and techniques with others!</p>
<section id="outline" class="level2">
<h2 class="anchored" data-anchor-id="outline">Outline</h2>
<p>Outline of this talk is as follows:</p>
<ol type="1">
<li>I will start with a brief history of Emacs and org-mode.</li>
<li>A brief background on plaintext.</li>
<li>We will follow with some motivation for why we would want to use plaintext to manage information and some of my supporting philosophies.</li>
<li>Next, we will jump into the building blocks of org-mode.</li>
<li>Which we will leverage to craft research workflows and introduce some automation into menial tasks.</li>
<li>I will highlight some additional features of org-mode that we can use for literate programming and reproducible research.</li>
<li>I will end this talk by pointing out additional resources that you may use to get started with Emacs.</li>
</ol>
</section>
<section id="a-note-for-the-audience" class="level2">
<h2 class="anchored" data-anchor-id="a-note-for-the-audience">A Note for the Audience</h2>
<p>When I was preparing material for this talk, I thought: what better way to talk about emacs and org-mode than to do it in emacs itself. There is a lot of text compared to a traditional presentation, and there is justification for doing so:</p>
<ol type="1">
<li>This talk is highly interactive and there are demos throughout. It would have been a bit annoying having to constantly switch between emacs and my slides.</li>
<li>There is another reason however I will reveal this towards the end of the talk</li>
</ol>
</section>
<section id="a-note-for-the-readers" class="level2">
<h2 class="anchored" data-anchor-id="a-note-for-the-readers">A Note for the Readers</h2>
<p>The original talk was giving using an org document, from within Emacs. This version that you are reading however, is the markdown version, exported from the original org document. Since the original talk was designed to be interactive and dynamic, certain parts of this post may not make sense in this static HTML format.</p>
</section>
</section>
<section id="history-background" class="level1">
<h1>History &amp; Background</h1>
<p>When I say text editors, you are most likely are think of software such as Atom, Sublime Text and VS Code. That’s what the normal folks use to get their job done. However, you may also be aware of this group of elitists who shun such tools, have a neckbeard, dwell in dungeons…and use Vim.</p>
<section id="emacs" class="level2">
<h2 class="anchored" data-anchor-id="emacs">Emacs</h2>
<p>Emacs is the <strong>other</strong> text editor that you may have heard of aside from Vim. There are several flavours of Emacs, the most popular being GNU Emacs which was created by Richard Stallman. The core, performance critical components of Emacs is written in C, however majority of it’s codebase is written in emacs-lisp (elisp) which is a variant of Lisp.</p>
<p>The first public release of Emacs was in 1970 (it has 20 years on Vim which was released in 1991), it is fully open-source, has had 27 stable releases, has a vibrant and large community and continues to be in active development to this date.</p>
</section>
<section id="org-mode" class="level2">
<h2 class="anchored" data-anchor-id="org-mode">org-mode</h2>
<p>org-mode is an emacs package. created by Carsten Dominik (professor of Astronomy at UvA, faculty of natural sciences) in 2003. org-mode provides two core functionalities:</p>
<ol type="1">
<li>It provides a major-mode (Emacs lingo for syntax highlighting based on filetype) for plaintext files.</li>
<li>And a slew of tools to organize and edit information in the form of lists (I like to think of them as trees).</li>
</ol>
</section>
<section id="plaintext" class="level2">
<h2 class="anchored" data-anchor-id="plaintext">Plaintext</h2>
<p>We have been talking about plaintext and I think it’s important to clarify what I mean. Plaintext in this context means text files which are unencrypted and written in a format (.{txt,md,org}) that is readable through a terminal emulator.</p>
</section>
</section>
<section id="motivation" class="level1">
<h1>Motivation &amp; Philosophy</h1>
<section id="why-use-plaintext" class="level2">
<h2 class="anchored" data-anchor-id="why-use-plaintext">Why use Plaintext?</h2>
<p>Why would we want to use plaintext to store information? There are several benefits, and the word “Freedom” encapsulates everything well. By freedom, I mean:</p>
<ol type="1">
<li>Freedom to do what we see fit with our data. Its stored as plaintext files on our system. We can choose to keep it that way, upload to our trusted cloud provider or even introduce encryption for additional security and privacy.</li>
<li>Freedom from yet another proprietary software. There are solutions that market themselves as systems for note-taking, knowledge management or a “second brain” such as Notion and Evernote. But the problem is that they are in control of your data (stored on their servers) and they often store this information in a proprietary format resulting in a vendor lock-in.</li>
<li>Freedom to choose (or craft) our own tools which are optimised for us and can scale with our ever-growing body of knowledge (remember, learning is a lifelong journey).</li>
</ol>
</section>
<section id="plaintext-productivity" class="level2">
<h2 class="anchored" data-anchor-id="plaintext-productivity">Plaintext &amp; Productivity</h2>
<p>Looking at the current landscape of productivity tools, I do not see anything that aids in exercising the one true productivity system that actually matters: our brain. Ultimately, it all comes down to effort and time taken to read papers, understanding concepts, learning, and forming connections which give rise to ideas. By takes away the “fluff”, plaintext allows us to focus on the essential. The text. The ideas. The connections.</p>
<p>There is no “one size fits all” or “cookie cutter” solution when it comes to productivity. The problem with existing productivity software is that they enforce their own structure and constraints which does more harm than good. I have given this a fair amount of thought and experimentation. In my experience, a two step process of 1. Capturing information quickly and 2. The act of reviewing captured information and deliberate summarisation works best. To this end, we will see how org-mode can help us with this.</p>
</section>
<section id="importance-of-structure-standardisation" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-structure-standardisation">Importance of Structure &amp; Standardisation</h2>
<p>I made a profound observation while reflection on my current research workflow. I spent a lot of my time during my masters on finding tools and systems for managing knowledge. Extrinsic search for existing solutions/methods was not fruitful. Instead, I used whatever solution came naturally to me. Through several iterations and minor changes, I developed a set of rules to store the data in a consistent structure. From this structure, developing tools to automate the process developed organically. I think this is such a simple thing, which makes it so powerful. We see similar phenomenon in software as well. We have decades of research which boils down to doing things in a consistent and standardised manner.</p>
</section>
<section id="non-linear-nature-of-research" class="level2">
<h2 class="anchored" data-anchor-id="non-linear-nature-of-research">Non-linear Nature of Research</h2>
<p>The main take-away for me was realising that research is dynamic, non-linear and personal. Finding the right tools is a journey which we must make ourselves. Using plaintext grants us the freedom to explore and experiment different options and techniques. It allows us to craft our own set of tools, standards and techniques which are curated towards how we think and operate.</p>
</section>
</section>
<section id="org-mode-first-principles" class="level1">
<h1>org-mode: First Principles</h1>
<p>Text in org documents are stored in an hierarchical manner, in the form of outlines.</p>
<section id="document-structure" class="level2">
<h2 class="anchored" data-anchor-id="document-structure">Document Structure</h2>
<p>We can create a new header (or “tree” in org lingo) by prepending the header title with a <code>*</code>. Trees can be nested, a tree may have several other sub-trees within itself. Sub-trees are created by adding more <code>*</code>, the number indicates the depth. We can promote or demote headers quickly using the <code>M-left</code> and <code>M-right</code> keybindings.</p>
<p>We can hide or show specific sections of a document by pressing <code>TAB</code> while positioning the cursor (or “point” in emacs lingo) on the header. We can also cycle the visibility of the entire document using <code>S-TAB</code>.</p>
<p>Org provides a few handy keybindings to move between headers. <code>C-c n</code> (mnemonic: “next”) takes us to the next header while <code>C-c p</code> (mnemonic: “previous”) takes us to the previous header. <code>C-c u</code> (mnemonic: “up”) can be used to navigate to the parent of the current sub-tree. <code>C-c f</code> (mnemonic: “forward”) and <code>C-c b</code> (mnemonic: “back”) navigates between headers of the same level.</p>
<p>We can edit the structure of a org document quickly by using <code>M-down</code> and <code>M-up</code> to move headers.</p>
</section>
<section id="todo-states" class="level2">
<h2 class="anchored" data-anchor-id="todo-states">Todo States</h2>
<p>Org was originally built to manage tasks in plaintext. A header can be converted to a task by prepending it with a “TODO” keyword. Org also understands the notion of various stages that a task may go through during it’s lifecycle. We can change the todo state interactively using <code>C-c C-t</code>.</p>
<p>The todo states are customizable and we will talk more about the ones I have created and use regularly to organize scientific research.</p>
</section>
<section id="capturing-refiling" class="level2">
<h2 class="anchored" data-anchor-id="capturing-refiling">Capturing &amp; Refiling</h2>
<p><strong>NOTE</strong> this section requires some setup and plumbing before it can be replicated. Refer to the org manual on <a href="https://orgmode.org/manual/Capture.html">capture</a> to get started.</p>
<p>Earlier I mentioned the notion of capturing information and reviewing them at a later stage as a system for productivity (see the section on Motivation &amp; Philosophy). Let’s dive deeper into the capturing segment and explore how org can help introduce some automation into this process.</p>
<p>We can invoke org-capture using <code>C-c c</code> which prompts us for a capture template. This is customizable and the most commonly used one is to capture tasks. Once we are satisfied with our content, we can use <code>C-c C-c</code> (this is also the universal keystroke you would use to tell emacs that you are “done” with something or to “confirm” something) to confirm, save and close the capture buffer. Later, I will also talk about the custom capture template that I have written for my research workflow.</p>
<p>By default, the captured text is saved in a predefined file, however we can also choose to save it somewhere else using org-refile (<code>C-c C-w</code> in the org-capture buffer).</p>
</section>
</section>
<section id="research-workflows" class="level1">
<h1>Research Workflows</h1>
<p>Let’s see how we can leverage what org has to offer in order aid us in scientific work.</p>
<section id="planning-structuring-papers" class="level2">
<h2 class="anchored" data-anchor-id="planning-structuring-papers">Planning &amp; Structuring Papers</h2>
<p>I find org to be particularly useful for planning and structuring scientific papers. I also use it to capture my thoughts, ideas and notes for various projects that I am working on. Once I have accumulated a large body of text, I find the the “narrow” functionality provided by emacs to help me focus on a particular section or region of text.</p>
</section>
<section id="bibliography-management" class="level2">
<h2 class="anchored" data-anchor-id="bibliography-management">Bibliography Management</h2>
<p>Besides keeping track of tasks, I use org to manage bibliographic information of scientific publications. Let’s look at an example in a project that I worked on earlier.</p>
<p>Org allows us to assign metadata to org headers known as org-properties. For instance, I like to store the first author, last author, source of publication, year of publication and a link to the pdf file on my disk as properties. Using the <code>org-sparse-tree</code> command (bound to <code>C-c /</code> in org-mode buffers), we can quickly find what we are looking for.</p>
</section>
<section id="aocp.el" class="level2">
<h2 class="anchored" data-anchor-id="aocp.el">aocp.el</h2>
<div class="callout callout-style-default callout-tip callout-titled" title="aocp.el">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
aocp.el
</div>
</div>
<div class="callout-body-container callout-body">
<p>More details regarding this package <a href="../aocp">can be found in my prior post</a>.</p>
</div>
</div>
<p>As you may expect, this task is repetitive and entering these properties manually becomes cumbersome. To automate this process, I wrote an emacs package: <a href="https://github.com/arumoy-shome/aocp.el">aocp.el</a>. The package provides a few helper functions which are meant to be used in an org-capture template (refer to the project readme for more information).</p>
</section>
</section>
<section id="infinity-beyond" class="level1">
<h1>Infinity &amp; Beyond</h1>
<p>Org let’s use schedule tasks and assign deadlines, <a href="https://orgmode.org/manual/Agenda-Views.html#Agenda-Views">org-agenda</a> acts as the front-end and more.</p>
<p>Using <a href="https://orgmode.org/manual/Exporting.html">org-export</a>, we can export org documents to other formats for simplicity of sharing and collaboration.</p>
<p>Using <a href="https://orgmode.org/manual/Publishing.html">org-publish</a>, we can run a website from within emacs.</p>
<p>Org does <a href="https://orgmode.org/manual/Tables.html">tables</a> and <a href="https://orgmode.org/manual/Images.html">images</a>!</p>
<p>We can write arbitrary pieces of code within org documents, use <a href="https://orgmode.org/worg/org-contrib/babel/">org-babel</a> to execute them and <a href="https://orgmode.org/manual/Extracting-Source-Code.html">org-tangle</a> to extract and create a source code file.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp" style="background: #f1f3f5;"><pre class="sourceCode commonlisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb1-1">(message <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello SERG from org-mode!"</span>)</span></code></pre></div>
<p>Since we can mix text and code in org documents, it becomes trivial to document experiments - complete with code snippets - which are reproducible. In fact, org is a popular choice within the community to document their emacs config. Yes, org-mode is basically Jupyter notebooks in plaintext!</p>
<p>And the list goes on. Refer to the <a href="https://orgmode.org/manual/">org manual</a> for an exhaustive list of what org can do.</p>
</section>
<section id="closing-thoughts" class="level1">
<h1>Closing Thoughts</h1>
<blockquote class="blockquote">
<p>“Premature optimisation is the root of all evil.” — Donald Knuth</p>
</blockquote>
<p>If you already have a system, methodology or tool that works for you, stick with it! There is no point reinventing the wheel, especially if you are content and productive with your existing system. You could also be on the other end of the spectrum, where you spend a lot of time configuring your system and tweaking your dotfiles!</p>
<p>That being said, if you are curious about emacs and want to learn more, I would strongly suggest to first get in the right mindset and set reasonable expectations. Emacs is not just another took, it’s a way of being. Learning everything that emacs has to offer will take a long time (I have been using emacs full-time for over 3 years and I am still learning new things!). Instead, start small, learn a small part of the system which will help you get the job done. Iterate, and slowly craft an environment that works for you.</p>
<section id="additional-resources" class="level2">
<h2 class="anchored" data-anchor-id="additional-resources">Additional Resources</h2>
<p>A few resources and pointers to help you get started:</p>
<ol type="1">
<li>Start with the tutorial: <code>C-h t</code>.</li>
<li>Read the manual: <code>C-h r</code> or alternatively <code>C-h i</code> to open the documentation viewer (info) and select “Emacs”.</li>
<li>Use the excellent and extensive emacs help system, some of the most frequent ones that I use are: <code>C-h f</code>, <code>C-h v</code>, <code>C-h o</code> and <code>C-h m</code>.</li>
<li>Consult the <a href="https://www.emacswiki.org/">emacs wiki</a>. I usually use it as reference once I have read about a particular topic in the manual.</li>
<li>Watch Harry Schwartz’s excellent talk on <a href="https://youtu.be/SzA2YODtgK4">getting started with org-mode</a>.</li>
<li>Watch Howard Abrams’ excellent talk on <a href="https://youtu.be/B6jfrrwR10k">emacs introduction and demonstration</a>.</li>
<li>Consult my <a href="https://github.com/arumoy-shome/emacs.d">emacs config files</a> if you prefer code.</li>
</ol>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>productivity</category>
  <category>emacs</category>
  <category>research</category>
  <guid>https://arumoy.me/blogs/research-workflow-plaintext/</guid>
  <pubDate>Mon, 12 Jul 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Aru’s Org Capture Template (aocp.el)</title>
  <dc:creator>Arumoy Shome</dc:creator>
  <link>https://arumoy.me/blogs/aocp/</link>
  <description><![CDATA[ 





<p>After observing my workflow of managing bibliographic information in Emacs, I extracted the repeated actions into an Emacs package.</p>
<p>To gain some perspective on my workflow, see my prior article on my <a href="../research-workflow">research workflow</a>.</p>
<p>The package is available on <a href="https://github.com/arumoy-shome/aocp.el">github</a> with two alternative installation methods: 1. By manually downloading the <code>aocp.el</code> file and sticking it in your Emacs <code>load-path</code>, or 2. Using <a href="https://github.com/raxod502/straight.el">straight.el</a> which is what I recommend.</p>
<p>The package works under the assumption that you manage your bibliographic information in <a href="https://orgmode.org">org-mode</a> (a major-mode for Emacs). The functions made available through this package are intended to be used in an <a href="https://orgmode.org/manual/Capture.html">org-capture</a> template, they are not meant to be called interactively (ie. by using <code>M-x</code>).</p>
<p>Assuming that you have a bibtex entry in your <code>kill-ring</code> (either by killing text within Emacs or by coping text from an external application into your clipboard), this package will do the following:</p>
<ul>
<li>Extract the bibkey</li>
<li>Extract the first author</li>
<li>Extract the last author</li>
<li>Extract the source of publication</li>
</ul>
<pre><code>* TODO %(aocp--get-bibkey nil)
  :PROPERTIES:
  :PDF: file:~/Documents/papers/%(aocp--get-bibkey t).pdf
  :FIRST_AUTHOR: %(aocp--get-first-author)
  :LAST_AUTHOR: %(aocp--get-last-author)
  :SOURCE: %(aocp--get-source)
  :END:
%?
+ problem statement ::
+ solution ::
+ results ::
+ limitations ::
+ remarks ::

  #+begin_src bibtex :tangle yes
  %c
  #+end_src</code></pre>
<p>Assuming you have the above template in <code>paper.txt</code>, you can configure org as follows (replace <code>your-org-inbox-file</code> appropriately):</p>
<pre class="elisp"><code>(setq org-capture-templates
    '(("p" "Paper" entry (file+headline your-org-inbox-file "Inbox")
    "%[~/.emacs.d/org-templates/paper.txt]")))</code></pre>
<p>With this in place, you can quickly collect all bibliographic information within an org file. Leveraging the powerful functionality provided by <a href="https://orgmode.org/guide/Properties.html">org-properties</a>, one can quickly find relevant papers. For instance, I can look up all papers by author X or all papers by author X published at Y.</p>
<p>A nice little tip is to download a local copy of the pdf and save them all in a folder. To make this easier, aocp.el also pushes the bibkey to the kill-ring. So all that is left to do is click the download button and paste the bibkey as the file name. This ensure 1. That you have all pdfs names consistently and 2. You have a link to the pdf from your org file (see the <code>:PDF:</code> property in the template above) which you can open by hitting <code>C-c C-o</code> over the link. You do not need to poke around in the directory containing the pdfs, all the context is available in the org file and should be the point of entry for all your bibliographic needs!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>emacs</category>
  <category>productivity</category>
  <guid>https://arumoy.me/blogs/aocp/</guid>
  <pubDate>Wed, 16 Jun 2021 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
